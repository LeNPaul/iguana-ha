{
   "getupvalue": {
      "Title": "debug.getupvalue",
      "SummaryLine": "Returns the name and the value of the upvalue with index <code>up</code> of the function <code>func</code>.",
      "Usage": "debug.getupvalue(func, up)",
      "Parameters": [
         {
            "func": {
               "Desc": "Function to return upvalue for <u>function</u>."
            }
         },
         {
            "up": {
               "Desc": "Index to find upvalue <u>integer</u>."
            }
         }
      ],
      "Returns": [
         {
            "Desc": "Name of the upvalue <u>string</u>."
         },
         {
            "Desc": "Value of the upvalue <u>any type</u>."
         }
      ],
      "SeeAlso": [
         {
            "Title": "The debug module - debugging functions",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#debug"
         },
         {
            "Title": "Online documentation for debug.getupvalue",
            "Link": "http://www.lua.org/manual/5.1/manual.html#pdf-debug.getupvalue"
         },
         {
            "Title": "Online documentation for Upvalues",
            "Link": "http://www.lua.org/pil/27.3.3.html"
         },
         {
            "Title": "Online documentation for Accessing Upvalues",
            "Link": "http://www.lua.org/pil/23.1.2.html"
         }
      ],
      "Desc": "This function returns the name and the value of the upvalue with index <code>up</code> of the function <code>func</code>. The function returns <b>nil</b> if there is no upvalue with the given index.<br><br>While the registry implements global values, the upvalue mechanism implements an equivalent of C static variables, which are visible only inside a particular function. Every time you create a new C function in Lua, you can associate with it any number of upvalues; each upvalue can hold a single Lua value. Later, when the function is called, it has free access to any of its upvalues, using pseudo-indices.<br><br>We call this association of a C function with its upvalues a closure. Remember that, in Lua code, a closure is a function that uses local variables from an outer function. A C closure is a C approximation to a Lua closure. One interesting fact about closures is that you can create different closures using the same function code, but with different upvalues."
   },
   "sethook": {
      "Title": "debug.sethook",
      "SummaryLine": "Sets the given function as a hook.",
      "Usage": "debug.sethook([thread,] hook, mask [, count])",
      "Parameters": [
         {
            "thread": {
               "Desc": "Thread to use <u>thread</u>.",
               "Opt": true
            }
         },
         {
            "hook": {
               "Desc": "Hook function to call <u>function</u>."
            }
         },
         {
            "mask": {
               "Desc": "Mask indicating when to call the hook function <u>string</u>."
            }
         },
         {
            "count": {
               "Desc": "Call the hook function after <b>count<b> instructions <u>number</u>.",
               "Opt": true
            }
         }
      ],
      "Returns": [],
      "SeeAlso": [
         {
            "Title": "The debug module - debugging functions",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#debug"
         },
         {
            "Title": "Online documentation for debug.sethook",
            "Link": "http://www.lua.org/manual/5.1/manual.html#pdf-debug.sethook"
         },
         {
            "Title": "Online documentation for Hooks",
            "Link": "http://www.lua.org/pil/23.2.html"
         }
      ],
      "Desc": "Sets the given function as a hook. The string <code>mask</code> and the number <code>count</code> describe when the hook will be called. The string mask may have the following characters, with the given meaning:<table class=\"Basic\" style=\"width:100%\"> <tr><th>Mask</th><th>Action</th></tr> <tr><td>\"c\"</td><td>the hook is called every time Lua calls a function.</td></tr><tr><td>\"r\"</td><td>the hook is called every time Lua returns from a function.</td></tr><tr><td>\"l\"</td><td>the hook is called every time Lua enters a new line of code.</td></tr></table><br>With a <code>count</code> different from zero, the hook is called after every <code>count</code> instructions.<br><br>When called without arguments, <code>debug.sethook</code> turns off the hook.<br><br>When the hook is called, its first parameter is a string describing the event that has triggered its call: <code>\"call\"</code>, <code>\"return\"</code> (or <code>\"tail return\"</code>, when simulating a return from a tail call), <code>\"line\"</code>, and <code>\"count\"</code>. For line events, the hook also gets the new line number as its second parameter. Inside a hook, you can call <code>getinfo</code> with level&nbsp;2 to get more information about the running function (level&nbsp;0 is the <code>getinfo</code> function, and level&nbsp;1 is the hook function), unless the event is <code>\"tail return\"</code>. In this case, Lua is only simulating the return, and a call to <code>getinfo</code> will return invalid data.

"
   },
   "getfenv": {
      "Title": "debug.getfenv",
      "SummaryLine": "Returns the environment of the supplied function.",
      "Usage": "debug.getfenv(f)",
      "Examples": [
         "<pre>-- compare function environment to global environment \"_G\"\nmain()\n   myFunc()   \nend\n\nfunction myFunc()\n   if (debug.getfenv(0)      == _G) then print ('Match') end --&gt; \"Match\" to global environment _G\n   if (debug.getfenv(1)      == _G) then print ('Match') end --&gt; \"Match\" to environment for calling function\n   if (debug.getfenv(main)   == _G) then print ('Match') end --&gt; \"Match\" to environment for main\n   if (debug.getfenv(2)      == _G) then print ('Match') end --&gt; \"Match\" to environment for this function\n   if (debug.getfenv(myFunc) == _G) then print ('Match') end --&gt; \"Match\" to environment for myFunc (this function)\nend</pre>",
         "<pre>-- change function environment and then compare to global environment\nmain()\n   myFunc(_G)\nend\n\nfunction myFunc(env)\n   if (debug.getfenv(myFunc) == _G) then print ('Match') end --&gt; \"Match\" to environment for myFunc (this function)\n\n   -- change the environment for this function\n   setfenv(myFunc,{my_debug={getfenv = debug.getfenv}, my_print = _G.print, myFunc = _G.myFunc})\n\n   -- compare to global environment (_G passed as parameter \"env\") now fails\n   if (my_debug.getfenv(2)      ~= env) then my_print ('No Match') end --&gt; \"No Match\" to environment for this function\n   if (my_debug.getfenv(myFunc) ~= env) then my_print ('No Match') end --&gt; \"No Match\" to environment for myFunc (this function)\nend</pre>"
      ],
      "Parameters": [
         {
            "f": {
               "Desc": "Function to return environment for <u>function</u>."
            }
         }
      ],
      "Returns": [
         {
            "Desc": "Function environment <u>table</u>."
         }
      ],
      "SeeAlso": [
         {
            "Title": "The debug module - debugging functions",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#debug"
         },
         {
            "Title": "Online documentation for debug.getfenv",
            "Link": "http://www.lua.org/manual/5.1/manual.html#pdf-debug.getfenv"
         },
         {
            "Title": "Online documentation for Variables",
            "Link": "http://www.lua.org/manual/5.1/manual.html#2.3"
         },
         {
            "Title": "Online documentation for The Environment",
            "Link": "http://www.lua.org/pil/14.html"
         },
         {
            "Title": "<b>Advanced:</b> sandboxing - running untrusted Lua code in a restricted Lua environment",
            "Link": "http://www.lua.org/pil/14.html"
         }
      ],
      "Desc": "Returns the current environment in use by the function. <code>f</code> must be a function, if it is not a Lua function the global environment is returned.<br><br>All global variables live as fields in ordinary Lua tables, called environment tables or simply environments.<br><br>Each function written in Lua (a Lua function) has its own reference to an environment, so that all global variables in that function will refer to that environment table. When a function is created, it inherits the environment from the function that created it (usually in Iguana this will be the global environment). To change or get the environment table of a Lua function, you call setfenv or getfenv.<br><br><b>Note:</b> Any functions written in C and exported to Lua (C functions) all share the common global environment (_G)."
   },
   "getregistry": {
      "Title": "debug.getregistry",
      "SummaryLine": "Returns the registry table.",
      "Usage": "debug.getregistry()",
      "Parameters": [],
      "Returns": [
         {
            "Desc": "The Lua registry table <u>table</u>."
         }
      ],
      "SeeAlso": [
         {
            "Title": "The debug module - debugging functions",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#debug"
         },
         {
            "Title": "Online documentation for debug.getregistry",
            "Link": "http://www.lua.org/manual/5.1/manual.html#pdf-debug.getregistry"
         },
         {
            "Title": "Online documentation for The Registry",
            "Link": "http://www.lua.org/pil/27.3.1.html"
         },
         {
            "Title": "Online documentation for Registry",
            "Link": "http://www.lua.org/manual/5.1/manual.html#3.5"
         }
      ],
      "Desc": "Returns the Lua registry table."
   },
   "gethook": {
      "Title": "debug.gethook",
      "SummaryLine": "Returns the current hook settings of the thread",
      "Usage": "debug.gethook([thread])",
      "Parameters": [
         {
            "thread": {
               "Desc": "Thread to use <u>thread</u>.",
               "Opt": true
            }
         }
      ],
      "Returns": [
         {
            "Desc": "The current hook function <u>function</u>."
         },
         {
            "Desc": "The current hook mask <u>string</u>."
         },
         {
            "Desc": "The current hook count <u>integer</u>."
         }
      ],
      "SeeAlso": [
         {
            "Title": "The debug module - debugging functions",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#debug"
         },
         {
            "Title": "Online documentation for debug.gethook",
            "Link": "http://www.lua.org/manual/5.1/manual.html#pdf-debug.gethook"
         },
         {
            "Title": "Online documentation for Hooks.",
            "Link": "http://www.lua.org/pil/23.2.html"
         }
      ],
      "Desc": "Returns the current hook settings of the thread, as three values: the current hook function, the current hook mask, and the current hook count (as set by the <code>debug.sethook</code> function).<br><br>The string mask returned may have the following characters, with the given meaning:<table class=\"Basic\" style=\"width:100%\"> <tr><th>Mask</th><th>Action</th></tr> <tr><td>\"c\"</td><td>the hook is called every time Lua calls a function.</td></tr><tr><td>\"r\"</td><td>the hook is called every time Lua returns from a function.</td></tr><tr><td>\"l\"</td><td>the hook is called every time Lua enters a new line of code.</td></tr></table><br>With a <code>count</code> returned that is different from zero, the hook is called after every <code>count</code> instructions."
   },
   "debug": {
      "Title": "debug.debug",
      "SummaryLine": "Enters an interactive mode with the user, running each string that the user enters.",
      "Usage": "debug.debug()",
      "Parameters": [],
      "Returns": [],
      "SeeAlso": [
         {
            "Title": "The debug module - debugging functions",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#debug"
         },
         {
            "Title": "Online documentation for debug.debug",
            "Link": "http://www.lua.org/manual/5.1/manual.html#pdf-debug.debug"
         },
         {
            "Title": "Online documentation for The Debug Library",
            "Link": "http://www.lua.org/pil/23.html"
         },
         {
            "Title": "Online documentation for Hooks",
            "Link": "http://www.lua.org/pil/23.2.html"
         },
         {
            "Title": "Online documentation for Introspective Facilities",
            "Link": "http://www.lua.org/pil/23.1.html"
         }
      ],
      "Desc": "Enters an interactive mode with the user, running each string that the user enters. Using simple commands and other debug facilities, the user can inspect global and local variables, change their values, evaluate expressions, and so on. A line containing only the word <code>cont</code> finishes this function, so that the caller continues its execution.<br><br><b>Note:</b> That commands for <code>debug.debug</code> are not lexically nested within any function, and so have no direct access to local variables."
   },
   "setlocal": {
      "Title": "debug.setlocal",
      "SummaryLine": "Assigns a value to variable in a function on the stack.",
      "Usage": "debug.setlocal([thread,] level, local, value)",
      "Parameters": [
         {
            "thread": {
               "Desc": "Thread to use <u>thread</u>.",
               "Opt": true
            }
         },
         {
            "level": {
               "Desc": "Stack level index for function <u>integer</u>."
            }
         },
         {
            "local": {
               "Desc": "Index for variable in the function <u>integer</u>."
            }
         },
         {
            "value": {
               "Desc": "Value to assign to variable <u>any type</u>."
            }
         }
      ],
      "Returns": [
         {
            "Desc": "The value of the loal variable (or nil if the specified variable not found) <u>any type or nil</u>."
         }
      ],
      "SeeAlso": [
         {
            "Title": "The debug module - debugging functions",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#debug"
         },
         {
            "Title": "Online documentation for debug.setlocal",
            "Link": "http://www.lua.org/manual/5.1/manual.html#pdf-debug.setlocal"
         }
      ],
      "Desc": "This function assigns the value <code>\"value\"</code> to the local variable with index <code>local</code> of the function at level <code>\"level\"</code> of the stack. The function returns <b>nil</b> if there is no local variable with the given index, and raises an error when called with a <code>level</code> out of range. (You can call <code>getinfo</code> to check whether the level is valid.) Otherwise, it returns the name of the local variable."
   },
   "traceback": {
      "Title": "debug.traceback",
      "SummaryLine": "Returns a string with a traceback of the call stack.",
      "Usage": "debug.traceback([thread] [, message] [, level])",
      "Parameters": [
         {
            "thread": {
               "Desc": "Thread to use <u>thread</u>.",
               "Opt": true
            }
         },
         {
            "message": {
               "Desc": "Message string to append <u>string</u>.",
               "Opt": true
            }
         },
         {
            "level": {
               "Desc": "Stack level index for function <u>integer</u>.",
              "Opt": true
             }
         }
      ],
      "Returns": [
         {
            "Desc": "The traceback of the stack call <u>string</u>."
         }
      ],
      "SeeAlso": [
         {
            "Title": "The debug module - debugging functions",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#debug"
         },
         {
            "Title": "Online documentation for debug.traceback",
            "Link": "http://www.lua.org/manual/5.1/manual.html#pdf-debug.traceback"
         }
      ],
      "Desc": "Returns a string with a traceback of the call stack. An optional message string is appended at the beginning of the traceback. An optional level number tells at which level to start the traceback (default is 1, the function calling traceback). "
   },
   "setfenv": {
      "Title": "debug.setfenv",
      "SummaryLine": "Sets the environment of an object to the given table.",
      "Usage": "debug.setfenv(f, table)",
      "Examples": [
         "<pre>-- change function environment and then compare to global environment\nmain()\n   myFunc(_G)\nend\n\nfunction myFunc(env)\n   if (debug.getfenv(myFunc) == _G) then print ('Match') end --&gt; \"Match\" to environment for myFunc (this function)\n\n   -- change the environment for this function\n   setfenv(myFunc,{my_debug={getfenv = debug.getfenv}, my_print = _G.print, myFunc = _G.myFunc})\n\n   -- compare to global environment (_G passed as parameter \"env\") now fails\n   if (my_debug.getfenv(2)      ~= env) then my_print ('No Match') end --&gt; \"No Match\" to environment for this function\n   if (my_debug.getfenv(myFunc) ~= env) then my_print ('No Match') end --&gt; \"No Match\" to environment for myFunc (this function)\nend</pre>"
      ],
      "Returns": [
         {
            "Desc": "The given function <u>function</u>."
         }
      ],
      "Parameters": [
         {
            "f": {
               "Desc": "Function to set the environment for <u>function</u>."
            },
         },
         {
            "table": {
               "Desc": "New environment table  <u>table</u>."
            }
         }
      ],
      "SeeAlso": [
         {
            "Title": "The debug module - debugging functions",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#debug"
         },
         {
            "Title": "Online documentation for debug.setfenv",
            "Link": "http://www.lua.org/manual/5.1/manual.html#pdf-debug.setfenv"
         },
         {
            "Title": "Online documentation for Variables",
            "Link": "http://www.lua.org/manual/5.1/manual.html#2.3"
         },
         {
            "Title": "Online documentation for The Environment",
            "Link": "http://www.lua.org/pil/14.html"
         },
         {
            "Title": "<b>Advanced:</b> sandboxing - running untrusted Lua code in a restricted Lua environment",
            "Link": "http://www.lua.org/pil/14.html"
         }
      ],
      "Desc": "Sets the environment to be used by the given function. f must be a Lua function. Returns the given function.<br><br>All global variables live as fields in ordinary Lua tables, called environment tables or simply environments.<br><br>Each function written in Lua (a Lua function) has its own reference to an environment, so that all global variables in that function will refer to that environment table. When a function is created, it inherits the environment from the function that created it (usually in Iguana this will be the global environment). To change or get the environment table of a Lua function, you call setfenv or getfenv.<br><br><b>Note:</b> Any functions written in C and exported to Lua (C functions) all share the common global environment (_G)."
   },
   "getinfo": {
      "Title": "debug.getinfo",
      "SummaryLine": "Returns a table with information about a function.",
      "Usage": "debug.getinfo([thread,] function [, what])",
      "Parameters": [
         {
            "thread": {
               "Desc": "Thread to use <u>thread</u>.",
               "Opt": true
            }
         },
         {
            "function": {
               "Desc": "Function to return information for <u>function or integer</u>."
            }
         },
         {
            "what": {
               "Desc": "Specify what information to get <u>string</u>.",
               "Opt": true
            }
         }
      ],
      "Returns": [
         {
            "Desc": "A table with information about the specified function <u>table</u>."
         }
      ],
      "SeeAlso": [
         {
            "Title": "The debug module - debugging functions",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#debug"
         },
         {
            "Title": "Online documentation for debug.getinfo",
            "Link": "http://www.lua.org/manual/5.1/manual.html#pdf-debug.getinfo"
         }
      ],
      "Desc": "Returns a table with information about a function. You can give the function directly, or you can give a number as the value of <code>function</code>, which means the function running at level <code>function</code> of the call stack of the given thread: level&nbsp;0 is the current function (<code>getinfo</code> itself); level 1 is the function that called <code>getinfo</code>; and so on. If <code>function</code> is a number larger than the number of active functions, then <code>getinfo</code> returns <b>nil</b>.<br><br>The returned table can contain all the fields returned by <code>lua_getinfo</code>, with the string <code>what</code> describing which fields to fill in. The default for <code>what</code> is to get all information available, except the table of valid lines. If present, the option '<code>f</code>' adds a field named <code>func</code> with the function itself. If present, the option '<code>L</code>' adds a field named <code>activelines</code> with the table of valid lines.<br><br>For instance, the expression <code>debug.getinfo(1,\"n\").name</code> returns a table with a name for the current function, if a reasonable name can be found, and the expression <code>debug.getinfo(print)</code> returns a table with all available information about the <code>print</code> function."
   },
   "setupvalue": {
      "Title": "debug.setupvalue",
      "SummaryLine": "Assigns a value to the upvalue with index \"up\" of the given function.",
      "Usage": "debug.setupvalue(func, up, value)",
      "Parameters": [
         {
            "func": {
               "Desc": "Function to set upvalue for <u>function</u>."
            }
         },
         {
            "up": {
               "Desc": "Index to find upvalue <u>integer</u>."
            }
         },
         {
            "value": {
               "Desc": "Value to assign to upvalue <u>any type</u>."
            }
         }
      ],
      "Returns": [
         {
            "Desc": "The name of the upvalue (or nil if the specified upvalue is not found) <u>string or nil</u>."
         }
      ],
      "SeeAlso": [
         {
            "Title": "The debug module - debugging functions",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#debug"
         },
         {
            "Title": "Online documentation for debug.setupvalue",
            "Link": "http://www.lua.org/manual/5.1/manual.html#pdf-debug.setupvalue"
         },
         {
            "Title": "Online documentation for Upvalues",
            "Link": "http://www.lua.org/pil/27.3.3.html"
         },
         {
            "Title": "Online documentation for Accessing Upvalues",
            "Link": "http://www.lua.org/pil/23.1.2.html"
         }
      ],
      "Desc": "This function assigns the value <code>value</code> to the upvalue with index <code>up</code> of the function <code>func</code>. The function returns <b>nil</b> if there is no upvalue with the given index. Otherwise, it returns the name of the upvalue.<br><br>While the registry implements global values, the upvalue mechanism implements an equivalent of C static variables, which are visible only inside a particular function. Every time you create a new C function in Lua, you can associate with it any number of upvalues; each upvalue can hold a single Lua value. Later, when the function is called, it has free access to any of its upvalues, using pseudo-indices.<br><br>We call this association of a C function with its upvalues a closure. Remember that, in Lua code, a closure is a function that uses local variables from an outer function. A C closure is a C approximation to a Lua closure. One interesting fact about closures is that you can create different closures using the same function code, but with different upvalues."
   },
   "setmetatable": {
      "Title": "debug.setmetatable",
      "SummaryLine": "Sets the metatable of an object to the given table.",
      "Usage": "debug.setmetatable(table, metatable)",
      "Parameters": [
         {
            "table": {
               "Desc": "Table to set metatable for <u>table</u>."
            }
         },
         {
            "metatable": {
               "Desc": "Metatable to set to <u>table or nil</u>."
            }
         }
      ],
      "Returns": [
         {
            "Desc": "Original table  <u>table</u>."
         }
      ],
      "SeeAlso": [
         {
            "Title": "The debug module - debugging functions",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#debug"
         },
         {
            "Title": "Online documentation for debug.setmetatable",
            "Link": "http://www.lua.org/manual/5.1/manual.html#pdf-debug.setmetatable"
         },
         {
            "Title": "Online documentation for metatable",
            "Link": "http://www.lua.org/pil/13.html"
         },
         {
            "Title": "Online documentation for Library-Defined Metamethods",
            "Link": "http://www.lua.org/pil/13.3.html"
         },
         {
            "Title": "Online documentation for Lua Classes With Metatable",
            "Link": "http://lua-users.org/wiki/LuaClassesWithMetatable"
         }
      ],
      "Desc": "Sets the metatable for the given table. If metatable is nil it removes the metatable of the given table. If the original metatable has a \"__metatable\" field then an error is raised.<br><br><b>Note:</b> You can only change the metatables of tables from Lua, metatables of other types can be changed from C."
   },
   "getmetatable": {
      "Title": "debug.getmetatable",
      "SummaryLine": "Returns the metatable of the given object.",
      "Usage": "debug.getmetatable(table)",
      "Parameters": [
         {
            "table": {
               "Desc": "Table to get metatable for <u>table</u>."
            }
         }
      ],
      "Returns": [
         {
            "Desc": "Metatable if it exists, otherwise nil <u>table or nil</u>."
         }
      ],
      "SeeAlso": [
         {
            "Title": "The debug module - debugging functions",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#debug"
         },
         {
            "Title": "Online documentation for debug.getmetatable",
            "Link": "http://www.lua.org/manual/5.1/manual.html#pdf-debug.getmetatable"
         },
         {
            "Title": "Online documentation for metatable",
            "Link": "http://www.lua.org/pil/13.html"
         },
         {
            "Title": "Online documentation for Library-Defined Metamethods",
            "Link": "http://www.lua.org/pil/13.3.html"
         },
         {
            "Title": "Online documentation for Lua Classes With Metatable",
            "Link": "http://lua-users.org/wiki/LuaClassesWithMetatable"
         }
      ],
      "Desc": "Returns the metatable of the given table, if the table does not have a metatable it returns nil.<br><br><b>Note:</b> If the table's metatable has a \"__metatable\" field then this value is returned instead."
   },
   "getlocal": {
      "Title": "debug.getlocal",
      "SummaryLine": "Returns the name and value of a variable from a function on the stack.",
      "Usage": "debug.getlocal([thread,] level, local)",
      "Parameters": [
         {
            "thread": {
               "Desc": "Thread to use <u>thread</u>.",
               "Opt": true
            }
         },
         {
            "level": {
               "Desc": "Stack level index for function <u>integer</u>."
             }
         },
         {
            "local": {
               "Desc": "Index for variable in the function <u>integer</u>."
            }
         },
      ],
      "Returns": [
         {
            "Desc": "Name of local variable (or nil if not found) <u>string</u>."
         },
         {
            "Desc": "Value of local variable (only returned when variable found) <u>any type</u>."
         }
      ],
      "SeeAlso": [
         {
            "Title": "The debug module - debugging functions",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#debug"
         },
         {
            "Title": "Online documentation for debug.getlocal",
            "Link": "http://www.lua.org/manual/5.1/manual.html#pdf-debug.getlocal"
         }
      ],
      "Desc": "This function returns the name and the value of the local variable with index <code>local</code> of the function at level <code>level</code> of the stack. (The first parameter or local variable has index&nbsp;1, and so on, until the last active local variable.) The function returns <b>nil</b> if there is no local variable with the given index, and raises an error when called with a <code>level</code> out of range. (You can call <code>debug.getinfo</code> to check whether the level is valid.)<br><br> Variable names starting with '<code>(</code>' (open parentheses) represent internal variables (loop control variables, temporaries, and C&nbsp;function locals)."
   }
}
