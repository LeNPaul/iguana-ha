{
   "S": {
      "Title": "node.S",
      "SummaryLine": "Converts a node to a string.",
      "Usage": "Node:S()",
      "Returns": [
         {
            "Desc": "The node converted to a string <u>string</u>."
         }
      ],
      "Examples": [
         "<pre>-- recommended usage:\nlocal s = Node:S()\n\n-- which is equivalent to:\nlocal s = tostring(Node)</pre>"
      ],
      "Parameters": [],
      "SeeAlso": [
         {
            "Title": "String conversion S() or nodeValue()?",
            "Link": "http://help.interfaceware.com/v6/string-conversion-s-or-nodevalue?v=6.0.0"
         },
         {
            "Title": "The node module - working with messages in Node Tree format",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#node"
         },
         {
            "Title": "Streaming and Filtering Data",
            "Link": "http://help.interfaceware.com/streaming-and-filtering-data.html?v=6.0.0"
         },
         {
            "Title": "Remove selected characters from any HL7 field for any message, master string.gsub() replacements",
            "Link": "http://help.interfaceware.com/remove-selected-characters-from-any-hl7-field-for-any-message-master-string-gsub-replacements.html?v=6.0.0"
         },
         {
            "Title": "Writing extensions to the node and string libraries",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#ext"
         },
         {
            "Title": "Understanding Lua OO syntax: what the colon operator means",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#colon"
         }
      ],
      "Desc": "Converts the specified <b>Node</b> to a string.<br><br> The <code>S()</code> function serializes any node into a string, and performs escaping if the protocol requires it. In general we recommend using <code>Node:S()</code> for non-leaf nodes and <code>Node:nodeValue()</code> for leaf nodes."
   },
   "isKey": {
      "Title": "node.isKey",
      "SummaryLine": "Determine if a column is the primary key for the table.",
      "Usage": "Node:isKey()",
      "Returns": [
         {
            "Desc": "True if the column is a primary key, false otherwise <u>boolean</u>."
         }
      ],
      "Examples": [
         "<pre>-- recommended usage:\nlocal iskey = Node:isKey()\n\n-- which is shorthand for:\nlocal iskey = node.isKey(Node)</pre>"
      ],
      "Parameters": [],
      "SeeAlso": [
         {
            "Title": "The node module - working with messages in Node Tree format",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#node"
         },
         {
            "Title": "Check if a node is a primary key",
            "Link": "http://help.interfaceware.com/code/details/check-if-a-node-is-a-primary-key?v=6.0.0"
         },
         {
            "Title": "Writing extensions to the node and string libraries",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#ext"
         },
         {
            "Title": "Understanding Lua OO syntax: what the colon operator means",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#colon"
         }
      ],
      "Desc": "Determine if the specified <b>Node</b> is a primary key column for the table. <br><br><b>Note:</b> This function only works with <b>table node trees</b>."
   },
   "childCount": {
      "Title": "node.childCount",
      "SummaryLine": "Determine the number of children a node has.",
      "Desc": "Determine the number of children the specified (parent) <b>Node</b> has.",
      "Usage": "Node:childCount([Name])",
      "Returns": [
         {
            "Desc": "The number of children <u>integer</u>."
         }
      ],
      "Examples": [
         "<pre>-- recommended usage:\nlocal cnt = Node:childCount()\n\n-- which is shorthand for:\nlocal cnt = node.childCount(Node)</pre>",
         "<pre>-- count named children only\nlocal cnt = Node:childCount(Name)</pre>"
      ],
      "SeeAlso": [
         {
            "Title": "The node module - working with messages in Node Tree format",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#node"
         },
         {
            "Title": "Get a child node by name",
            "Link": "http://help.interfaceware.com/code/details/get-a-child-node-by-name?v=6.0.0"
         },
         {
            "Title": "Count child nodes",
            "Link": "http://help.interfaceware.com/code/details/count-child-nodes?v=6.0.0"
         },
         {
            "Title": "Parsing the IguanaConfiguration.xml file",
            "Link": "http://help.interfaceware.com/building-a-custom-gui-to-configure-a-template.html?v=6.0.0"
         },
         {
            "Title": "Writing extensions to the node and string libraries",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#ext"
         },
         {
            "Title": "Understanding Lua OO syntax: what the colon operator means",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#colon"
         }
      ],
      "Parameters": [
         {
            "Name": {
               "Desc": "When used, only children with this name are counted <u>string</u>.",
               "Opt": true
            }
         }
      ]
   },
   "child": {
      "Title": "node.child",
      "SummaryLine": "Find a child with a specific name.",
      "Desc": "Find a child with a specific name under the specified (parent) <b>Node</b>.",
      "Usage": "Node:child(Name [, Repeat])",
      "SeeAlso": [
         {
            "Title": "The node module - working with messages in Node Tree format",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#node"
         },
         {
            "Title": "Get a child node by name",
            "Link": "http://help.interfaceware.com/code/details/get-a-child-node-by-name?v=6.0.0"
         },
         {
            "Title": "Count child nodes",
            "Link": "http://help.interfaceware.com/code/details/count-child-nodes?v=6.0.0"
         },
         {
            "Title": "Parsing the IguanaConfiguration.xml file",
            "Link": "http://help.interfaceware.com/building-a-custom-gui-to-configure-a-template.html?v=6.0.0"
         },
         {
            "Title": "Writing extensions to the node and string libraries",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#ext"
         },
         {
            "Title": "Understanding Lua OO syntax: what the colon operator means",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#colon"
         }
      ],
      "Returns": [
         {
            "Desc": "The child with the specified name <u>node tree</u>."
         }
      ],
      "Examples": [
         "<pre>-- recommended usage:\nlocal child = Node:child(Name)\n\n-- which is shorthand for:\nlocal child = node.child(Node, Name)</pre>",
         "<pre>-- local child = Node:child(Name, Repeat)</pre>"
      ],
      "Parameters": [
         {
            "Name": {
               "Desc": "The name of the child to return <u>string</u>."
            }
         },
         {
            "Repeat": {
               "Desc": "When several children have the same name, this can be used to specify which of them to return <u>integer</u>",
               "Opt": true
            }
         }
      ]
   },
   "nodeName": {
      "Title": "node.nodeName",
      "SummaryLine": "Determine the name of a node.",
      "Usage": "Node:nodeName()",
     "SeeAlso": [
         {
            "Title": "The node module - working with messages in Node Tree format",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#node"
         },
         {
            "Title": "Get the name of a node",
            "Link": "http://help.interfaceware.com/code/details/get-the-name-of-a-node?v=6.0.0"
         },
         {
            "Title": "Helper method to see if a node has a member with a given name",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#members"
         },
         {
            "Title": "Writing extensions to the node and string libraries",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#ext"
         },
         {
            "Title": "Understanding Lua OO syntax: what the colon operator means",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#colon"
         }
      ],
      "Returns": [
         {
            "Desc": "The name of a node <u>string</u>."
         }
      ],
      "Examples": [
         "<pre>-- recommended usage:\nlocal name = Node:nodeName(Name)\n\n-- which is shorthand for:\nlocal name = node.nodeName(Node, Name)</pre>"
      ],
      "Parameters": [],
      "Desc": "Determine the name of the specified <b>Node</b>."
   },
   "mapTree": {
      "SummaryLine": "Maps fields from a source node to a destination node.",
      "Usage": "Dest:mapTree(Source)",
      "SeeAlso": [
         {
            "Title": "The node module - working with messages in Node Tree format",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#node"
         },
         {
            "Title": "Code Navigation",
            "Link": "http://help.interfaceware.com/v6/using-the-translator?v=6.0.0#navigation"
         },
         {
            "Title": "Writing extensions to the node and string libraries",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#ext"
         },
         {
            "Title": "Understanding Lua OO syntax: what the colon operator means",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#colon"
         }
      ],
      "Parameters": [
         {
            "Source": {
               "Desc": "The source node <u>node tree</u>."
            }
         }
      ],
      "Returns": [],
      "Examples": [
         "<pre>-- recommended usage:\nDest:mapTree(Source)\n\n-- which is shorthand for:\nnode.mapTree(Dest, Source)</pre>"
      ],
      "Title": "node.mapTree",
      "Desc": "Maps fields from a source node to the specified destination node <b>Dest</b>."
   },
   "nodeType": {
      "Title": "node.nodeType",
      "SummaryLine": "Determine the type and category of a node.",
      "Usage": "Node:nodeType()",
      "SeeAlso": [
         {
            "Title": "The node module - working with messages in Node Tree format",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#node"
         },
         {
            "Title": "Get the type of a node",
            "Link": "http://help.interfaceware.com/code/details/get-the-type-of-a-node?v=6.0.0"
         },
         {
            "Title": "Node Types for Iguana Node Trees",
            "Link": "http://help.interfaceware.com/v6/node-types-for-iguana-node-trees?v=6.0.0"
         },
         {
            "Title": "Formatting output HL7 without trailing | characters",
            "Link": "http://help.interfaceware.com/v6/working-with-hl7?v=6.0.0#menu4"
         },
         {
            "Title": "Mapping messages",
            "Link": "http://help.interfaceware.com/code/details/map-an-hl7-message?v=6.0.0"
         },
         {
            "Title": "Code: Mapping HL7 to HL7",
            "Link": "http://help.interfaceware.com/v6/mapping-hl7-to-hl7?v=6.0.0"
         },
         {
            "Title": "Writing extensions to the node and string libraries",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#ext"
         },
         {
            "Title": "Understanding Lua OO syntax: what the colon operator means",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#colon"
         }
      ],
      "Returns": [
         {
            "Desc": "The type and category of the node as a string <u>string</u>."
         }
      ],
      "Examples": [
         "<pre>-- recommended usage:\nlocal type = Node:nodeType()\n\n-- which is shorthand for:\nlocal type = node.nodeType(Node)</pre>"
      ],
      "Parameters": [],
      "Desc": "Determine the type and category of the specified <b>Node</b>."
   },
   "isLeaf": {
      "Title": "node.isLeaf",
      "SummaryLine": "Determine if a node is a leaf.",
      "Usage": "Node:isLeaf()",
      "SeeAlso": [
         {
            "Title": "The node module - working with messages in Node Tree format",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#node"
         },
         {
            "Title": "Check if a node is a leaf node",
            "Link": "http://help.interfaceware.com/code/details/check-if-a-node-is-a-leaf-node?v=6.0.0"
         },
         {
            "Title": "Check if a node is empty (null)",
            "Link": "http://help.interfaceware.com/code/details/check-if-a-node-is-null?v=6.0.0"
         },
         {
            "Title": "Get the value of a node",
            "Link": "http://help.interfaceware.com/code/details/get-the-value-of-a-node?v=6.0.0"
         },
         {
            "Title": "Writing extensions to the node and string libraries",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#ext"
         },
         {
            "Title": "Understanding Lua OO syntax: what the colon operator means",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#colon"
         }
      ],
      "Returns": [
         {
            "Desc": "True if the node is a leaf (has no children), false otherwise <u>boolean</u>."
         }
      ],
      "Examples": [
         "<pre>-- recommended usage:\nlocal isleaf = Node:isLeaf()\n\n-- which is shorthand for:\nlocal isleaf = node.isLeaf(Node)</pre>"
      ],
     "Parameters": [],
      "Desc": "Determine if the specified <b>Node</b> is a leaf node."
   },
   "remove": {
      "Title": "node.remove",
      "SummaryLine": "Removes a child node.",
      "Usage": "Node:remove(Index)",
      "SeeAlso": [
         {
            "Title": "The node module - working with messages in Node Tree format",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#node"
         },
         {
            "Title": "Delete a node tree element",
            "Link": "http://help.interfaceware.com/code/details/delete-a-node-tree-element?v=6.0.0"
         },
         {
            "Title": "Delete a table element",
            "Link": "http://help.interfaceware.com/code/details/delete-a-table-element?v=6.0.0"
         },
         {
            "Title": "Code: Mapping HL7 to HL7",
            "Link": "http://help.interfaceware.com/v6/mapping-hl7-to-hl7?v=6.0.0"
         },
         {
            "Title": "Prevent NULL values from causing “unintentional” database deletions",
            "Link": "http://help.interfaceware.com/v6/prevent-null-values-from-causing-unintentional-database-deletions?v=6.0.0"
         },
         {
            "Title": "Writing extensions to the node and string libraries",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#ext"
         },
         {
            "Title": "Understanding Lua OO syntax: what the colon operator means",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#colon"
         }
      ],
      "Returns": [],
      "Examples": [
         "<pre>-- recommended usage:\nNode:remove(Index)\n\n-- which is shorthand for:\nnode.remove(Node, Index)</pre>"
      ],
      "Desc": "Removes a child node from the specified <b>Node</b>.",
      "Parameters": [
         {
            "Index": {
               "Desc": "The index or name of the child to remove <u>string</u>."
            }
         }
      ]
   },
   "mapRange": {
      "Title": "node.mapRange",
      "Returns": [],
      "Examples": [
         "<pre>-- recommended usage:\nDest:mapRange(Source, Start)\n\n-- which is shorthand for:\nnode.mapRange(Dest, Source, Start)</pre>",
         "<pre>Dest:mapRange(Source, Start, End)</pre>"
      ],
      "SummaryLine": "Maps a range of fields from a source node to a destination node.",
      "Usage": "Dest:mapRange(Source, Start [, End])",
      "SeeAlso": [
         {
            "Title": "The node module - working with messages in Node Tree format",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#node"
         },
         {
            "Title": "Translating HL7",
            "Link": "http://help.interfaceware.com/v6/hl7-fundamentals-2?v=6.0.0#menu4"
         },
         {
            "Title": "Mapping messages",
            "Link": "http://help.interfaceware.com/code/details/map-an-hl7-message?v=6.0.0"
         },
         {
            "Title": "Code: Mapping HL7 to HL7",
            "Link": "http://help.interfaceware.com/v6/mapping-hl7-to-hl7?v=6.0.0"
         },
         {
            "Title": "Writing extensions to the node and string libraries",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#ext"
         },
         {
            "Title": "Understanding Lua OO syntax: what the colon operator means",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#colon"
         }
      ],
      "Desc": "Maps a range of fields from a source node to the specified destination node <b>Dest</b>.",
      "Parameters": [
         {
            "Source": {
               "Desc": "The source node <u>node tree</u>."
            }
         },
         {
            "Start": {
               "Desc": "An index representing the start of the range <u>integer</u>."
            }
         },
         {
            "End": {
               "Desc": "An index representing the end of the range <u>integer</u>.",
               "Opt": true
            }
         }
      ]
   },
   "isNull": {
      "Title": "node.isNull",
      "SummaryLine": "Determine if a node is null.",
      "Usage": "Node:isNull()",
      "SeeAlso": [
         {
            "Title": "The node module - working with messages in Node Tree format",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#node"
         },
         {
            "Title": "Dealing with NULL data from databases",
            "Link": "http://help.interfaceware.com/v6/dealing-with-null-data-from-databases?v=6.0.0"
         },
         {
            "Title": "Check if a node is empty (null)",
            "Link": "http://help.interfaceware.com/code/details/check-if-a-node-is-null?v=6.0.0"
         },
         {
            "Title": "Check if a node is a leaf node",
            "Link": "http://help.interfaceware.com/code/details/check-if-a-node-is-a-leaf-node?v=6.0.0"
         },
         {
            "Title": "Writing extensions to the node and string libraries",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#ext"
         },
         {
            "Title": "Understanding Lua OO syntax: what the colon operator means",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#colon"
         }
      ],
      "Returns": [
         {
            "Desc": "True if the node is null (not present), false otherwise <u>boolean</u>."
         }
      ],
      "Examples": [
         "<pre>-- recommended usage:\nlocal isnull = Node:isNull()\n\n-- which is shorthand for:\nlocal isnull = node.isNull(Node)</pre>"
      ],
      "Parameters": [],
      "Desc": "Determine if the specified <b>Node</b> is null (not present)."
   },
   "append": {
      "Title": "node.append",
      "SummaryLine": "Create and append a new node (works with XML only).",
      "Desc": "Create and append a new node to the specified (parent) <b>XML Node</b>.<br><br><b>Note:</b> This only works with <b>XML node trees</b>.",
      "Usage": "Node:append(Type, Value)",
      "SeeAlso": [
         {
            "Title": "The node module - working with messages in Node Tree format",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#node"
         },
         {
            "Title": "Code: Setting an XML node to a space ” ” character",
            "Link": "http://help.interfaceware.com/setting-an-xml-node-to-a-space-character.html?v=6.0.0"
         },
         {
            "Title": "CDA: Generate Document in the Protocols repository",
            "Link": "http://help.interfaceware.com/v6/generate-a-cda-document?v=6.0.0"
         },
         {
            "Title": "Append an XML node",
            "Link": "http://help.interfaceware.com/code/details/append-an-xml-node?v=6.0.0"
         },
         {
            "Title": "Writing extensions to the node and string libraries",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#ext"
         },
         {
            "Title": "Understanding Lua OO syntax: what the colon operator means",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#colon"
         }
      ],
      "Returns": [
         {
            "Desc": "The new node which was appended <u>xml node tree</u>."
         }
      ],
      "Examples": [
         "<pre>-- recommended usage:\nlocal node = Node:append(Type, Value)\n\n-- which is shorthand for:\nlocal node = node.append(Node, Type, Value)</pre>"
      ],
      "Parameters": [
         {
            "Type": {
               "Desc": "The type of the new node: xml.ELEMENT, xml.ATTRIBUTE, xml.TEXT or xml.CDATA <u>string</u>."
            }
         },
         {
            "Value": {
               "Desc": "The name or data of the new node <u>string</u>"
            }
         }
      ]
   },
   "nodeValue": {
      "Title": "node.nodeValue",
      "SummaryLine": "Determine the value of a node.",
      "Usage": "Node:nodeValue()",
      "SeeAlso": [
         {
            "Title": "The node module - working with messages in Node Tree format",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#node"
         },
         {
            "Title": "String conversion S() or nodeValue()?  - which string conversion to use",
            "Link": "http://help.interfaceware.com/v6/string-conversion-s-or-nodevalue?v=6.0.0"
         },
         {
            "Title": "Get the value of a node",
            "Link": "http://help.interfaceware.com/code/details/get-the-value-of-a-node?v=6.0.0"
         },
         {
            "Title": "Read an empty XML TEXT element",
            "Link": "http://help.interfaceware.com/code/details/read-an-empty-xml-text-element?v=6.0.0"
         },
         {
            "Title": "Writing extensions to the node and string libraries",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#ext"
         },
         {
            "Title": "Understanding Lua OO syntax: what the colon operator means",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#colon"
         }
      ],
      "Returns": [
         {
            "Desc": "The value of a node <u>string</u>."
         }
      ],
      "Examples": [
         "<pre>-- recommended usage:\nlocal value = Node:nodeValue()\n\n-- which is shorthand for:\nlocal value = node.nodeValue(Node)</pre>"
      ],
      "Parameters": [],
      "Desc": "Determine the value of the specified <b>Node</b>."
   },
   "setInner": {
      "Title": "node.setInner",
      "SummaryLine": "Sets the contents of an XML node (works with XML only).",
      "Desc": "Sets the contents of the specified XML <b>Node</b>.<br><br><b>Note:</b> This only works with <b>XML node trees</b>.",
      "Usage": "Node:setInner(Content)",
      "SeeAlso": [
         {
            "Title": "The node module - working with messages in Node Tree format",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#node"
         },
         {
             "Title": "CDA: Generate Document in the Protocols repository",
             "Link": "http://help.interfaceware.com/v6/generate-a-cda-document?v=6.0.0"
         },
         {
            "Title": "Set the value of an XML node",
            "Link": "http://help.interfaceware.com/code/details/set-the-value-of-an-xml-node?v=6.0.0"
         },
         {
            "Title": "Code: Setting an XML node to a space ” ” character",
            "Link": "http://help.interfaceware.com/setting-an-xml-node-to-a-space-character.html?v=6.0.0"
         },
         {
            "Title": "Writing extensions to the node and string libraries",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#ext"
         },
         {
            "Title": "Understanding Lua OO syntax: what the colon operator means",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#colon"
         }
      ],
      "Returns": [
         {
            "Desc": "The modified node after its contents have been set <u>node tree</u>."
         }
      ],
      "Examples": [
         "<pre>-- recommended usage:\nlocal node = Node:setInner(Content)\n\n-- which is shorthand for:\nlocal node = node.setInner(Node, Content)</pre>"
      ],
      "Parameters": [
         {
            "Content": {
               "Desc": "A string containing the content to be parsed <u>string</u>."
            }
         }
      ]
   },
   "insert": {
      "Title": "node.insert",
      "SummaryLine": "Create and insert a new node (works with XML only).",
      "Desc": "Create and insert a new node under the specified (parent) <b>XML Node</b>.<br><br><b>Note:</b> This only works with <b>XML node trees</b>.",
      "Usage": "Node:insert(Index, Type, Value)",
      "SeeAlso": [
         {
            "Title": "The node module - working with messages in Node Tree format",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#node"
         },
         {
            "Title": "Insert an XML node",
            "Link": "http://help.interfaceware.com/code/details/insert-an-xml-node?v=6.0.0"
         },
         {
            "Title": "Writing extensions to the node and string libraries",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#ext"
         },
         {
            "Title": "Understanding Lua OO syntax: what the colon operator means",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#colon"
         }
      ],
      "Returns": [
         {
            "Desc": "The new node which was inserted <u>node tree</u>."
         }
      ],
      "Examples": [
         "<pre>-- recommended usage:\nlocal node = Node:insert(Index, Type, Value)\n\n-- which is shorthand for:\nlocal node = node.insert(Node, Index, Type, Value)</pre>"
      ],
      "Parameters": [
         {
            "Index": {
               "Desc": "The index at which the new node should be inserted <u>integer</u>."
            }
         },
         {
            "Type": {
               "Desc": "The type of the new node: xml.ELEMENT, xml.ATTRIBUTE, xml.TEXT or xml.CDATA <u>string</u>."
            }
         },
         {
            "Value": {
               "Desc": "The name or data of the new node <u>string</u>."
            }
         }
      ]
   },
   "setNodeValue": {
      "Title": "node.setNodeValue",
      "SummaryLine": "Set the value of this node (string values only).",
      "Desc": "Updates the value of the specified <b>Node</b> with the value provided in the parameter.",
      "Usage": "Node:setNodeValue(Value)",
      "SeeAlso": [
         {
            "Title": "The node module - working with messages in Node Tree format",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#node"
         },
         {
            "Title": "Set the value of a node",
            "Link": "http://help.interfaceware.com/code/details/set-the-value-of-a-node?v=6.0.0"
         },
         {
            "Title": "Writing extensions to the node and string libraries",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#ext"
         },
         {
            "Title": "Understanding Lua OO syntax: what the colon operator means",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#colon"
         }
      ],
      "Returns": [
         {
            "Desc": "the node itself whose value was just set (for chaining). <u>node tree</u>"
         }
      ],
      "Examples": [
         "Node:setNodeValue(os.date('%Y%m%H%m'))<br/>-- which is shorthand for:<br/><br/>node.setNodeValue(Node, os.date('%Y%m%H%m'))",
         "local Msg = hl7.message{vmd='demo.vmd', name='ADT'}<br/><br/>-- you want to set the Time in the MSH segment:<br/>Msg.MSH[7][1] = os.date('%Y%m%H%m')             -- works: assigns value to the child node<br/>Msg.MSH[7][1]:setNodeValue(os.date('%Y%m%H%m')) -- works: set the node value<br/><br/>-- if you decide to use a variable then:<br/>local MsgTime = Msg.MSH[7][1]<br/>MsgTime = os.date('%Y%m%H%m')                   -- fails: assigns the date to the variable (try it)<br/>MsgTime:setNodeValue(os.date('%Y%m%H%m'))       -- works: set the node value",
         "-- a useful function to empty/clear nodes with or without children<br/>function node:clearNode()<br/>   trace(self)<br/>   if self:isLeaf() then<br/>      self:setNodeValue('') -- usng setNodeValue() is the only way to clear leaf nodes<br/>   else<br/>      for nChild = self:childCount(), 1 , -1 do<br/>         self:remove(nChild)<br/>      end<br/>      trace(self)<br/>   end<br/>end"
      ],
      "Parameters": [
         {
            "Value": {
               "Desc": "The new value of the node. <u>string</u>"
            }
         }
      ]
   },
   "nodeText" : {
      "Title" : "node.nodeText",
      "SummaryLine" : "Returns the text value of this node",
      "Desc" : "Returns the text value of the specified <b>Node</b>",
      "Usage" : "Node:nodeText()",
      "SeeAlso": [
         {
            "Title": "The node module - working with messages in Node Tree format",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#node"
         },
         {
            "Title": "XML Techniques in the Protocols repository",
            "Link": "http://help.interfaceware.com/v6/xml-channel?v=6.0.0"
         },
         {
            "Title": "Read an empty XML TEXT element",
            "Link": "http://help.interfaceware.com/code/details/read-an-empty-xml-text-element?v=6.0.0"
         },
         {
            "Title": "Writing extensions to the node and string libraries",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#ext"
         },
         {
            "Title": "Understanding Lua OO syntax: what the colon operator means",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#colon"
         }
      ],
      "Returns" : [
         {
            "Desc" : "the text node of that node."
         }
      ],
      "Examples": [
         "<pre>-- recommended usage:\nlocal text = Node:nodeText()</pre>"
      ],
     "Parameters": []
   },
   "capitalize" : {
      "Title":"string.capitalize",
      "Usage" :"string.capitalize(string) or aString:capitalize()",
      "SummaryLine":"Capitalizes the first letter of a string",
      "Desc":"Capitalize the first letter of a string.",
      "Returns" : [
         {
            "Desc": "String after it it has been capitalized <u>string</u>."
         }
      ],
      "ParameterTable" : false,
      "Parameters" : [
         {"string" :
            { "Desc" : "String to be capitalized <u>string</u>." }
         },
      ],
      "Examples" : [
            "   local S = 'string to be capitalized'
         S:capitalize()
         --> 'String to be capitalized'
            
         string.capitalize('string to be capitalized') 
         --> 'String to be capitalized'"
      ], 
      "SeeAlso":[
         {
            "Title":"String Manipulation Extensions in our Tools repository ",
            "Link":"http://help.interfaceware.com/v6/stringutil-string-functions"
         },
         {
            "Title": "The node module - working with messages in Node Tree format",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#node"
         },
         {
            "Title": "String Manipulation Extensions in our Tools repository",
            "Link": "http://help.interfaceware.com/v6/stringutil-string-functions?v=6.0.0"
         },
         {
            "Title": "Tutorial: Transforming Messages – HL7 to HL7",
            "Link": "http://help.interfaceware.com/transforming-messages-hl7-to-hl7.html?v=6.0.0"
         },
         {
            "Title": "Writing extensions to the node and string libraries",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#ext"
         },
         {
            "Title": "Understanding Lua OO syntax: what the colon operator means",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#colon"
         }
      ]
   },
   "trimWS" : {
      "Title":"string.trimWS",
      "Usage":"string.trimWS(string) or aString:trimWS()",
      "SummaryLine":"Trims white space from the start and the end of a string.",
      "Desc": "Trims white space from the start and the end of a string.",
      "Returns" : [
         { "Desc":"String after white spaces have been trimmed <u>string</u>."},
      ],
      "ParameterTable" : false,
      "Parameters" : [
         {"string": {"Desc" : "String to trim spaces from <u>string</u>."} },
      ],
      "Examples":[
         "   local S = '   trim spaces before and after   '
         S:trimWS()
         --> 'trim spaces before and after'
            
         string.trimWS('   trim spaces before and after   ') 
         --> 'trim spaces before and after'"
         
      ],
      "SeeAlso":[
         {
            "Title":"String Manipulation Extensions in our Tools repository ",
            "Link":"http://help.interfaceware.com/v6/stringutil-string-functions"
         },
         {
            "Title":"stringutil.lua - in our code repository.",
            "Link":"http://help.interfaceware.com/code/details/stringutil-lua"
         },
         {
            "Title": "The node module - working with messages in Node Tree format",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#node"
         },
         {
            "Title": "String Manipulation Extensions",
            "Link": "http://help.interfaceware.com/v6/stringutil-string-functions?v=6.0.0"
         },
         {
            "Title": "Writing extensions to the node and string libraries",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#ext"
         },
         {
            "Title": "Understanding Lua OO syntax: what the colon operator means",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#colon"
         }
      ]
   },
   "trimRWS" : {
      "Title":"string.trimRWS",
      "Usage":"string.trimRWS(string) or aString:trimRWS()",
      "SummaryLine":"Trims white space from the right of a string.",
      "Desc":"Trims white space from the right of a string.",
      "Returns" : [
         {"Desc":"String after white spaces have been trimmed <u>string</u>."},
      ],
      "ParameterTable": false,
      "Parameters": [
         {"string": {"Desc":"String to trim spaces from <u>string</u>."}},
      ],
      "Examples":[
         "   local S = '   trim spaces from the right   '
         S:trimRWS()
         --> '   trim spaces from the right'
            
         string.trimRWS('   trim spaces from the right   ') 
         --> '   trim spaces from the right'
         "
      ],

      "SeeAlso":[
         {
            "Title":"String Manipulation Extensions in our Tools repository ",
            "Link":"http://help.interfaceware.com/v6/stringutil-string-functions"
         },
         {
            "Title":"stringutil.lua - in our code repository.",
            "Link":"http://help.interfaceware.com/code/details/stringutil-lua"
         },
         {
            "Title": "The node module - working with messages in Node Tree format",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#node"
         },
         {
            "Title": "String Manipulation Extensions",
            "Link": "http://help.interfaceware.com/v6/stringutil-string-functions?v=6.0.0"
         },
         {
            "Title": "Writing extensions to the node and string libraries",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#ext"
         },
         {
            "Title": "Understanding Lua OO syntax: what the colon operator means",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#colon"
         }
      ]
   },
   "trimLWS" : {
      "Title":"string.trimLWS",
      "Usage":"string.trimLWS(string) or aString:trimLWS()",
      "SummaryLine":"Trims white space from the left of a string.",
      "Desc":"Trims white space from the left of a string.",
      "Returns" : [
         {"Desc":"String after white spaces have been trimmed <u>string</u>."},
      ],
      "ParameterTable": false,
      "Parameters": [
         {"string": {"Desc":"String to trim spaces from <u>string</u>."}},
      ],
      "Examples":[
         "local S = '   trim spaces from the left   '
         S:trimLWS()
         --> 'trim spaces from the left   '
            
         string.trimLWS('   trim spaces from the left   ') 
         --> 'trim spaces from the left   '"
      ],

      "SeeAlso":[
         {
            "Title":"String Manipulation Extensions in our Tools repository ",
            "Link":"http://help.interfaceware.com/v6/stringutil-string-functions"
         },
         {
            "Title":"stringutil.lua - in our code repository.",
            "Link":"http://help.interfaceware.com/code/details/stringutil-lua"
         },
         {
            "Title": "Dealing with NULL data from databases",
            "Link": "http://help.interfaceware.com/v6/dealing-with-null-data-from-databases?v=6.0.0"
         },
         {
            "Title": "String Manipulation Extensions",
            "Link": "http://help.interfaceware.com/v6/stringutil-string-functions?v=6.0.0"
         },
         {
            "Title": "The node module - working with messages in Node Tree format",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#node"
         },
         {
            "Title": "Writing extensions to the node and string libraries",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#ext"
         },
         {
            "Title": "Understanding Lua OO syntax: what the colon operator means",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#colon"
         }
      ]
   },
   "compactWS": {
      "Title":"string.compactWS",
      "Usage":"string.compactWS(string) or aString:compactWS()",
      "SummaryLine":"Replace multiple spaces with a single space.",
      "Desc":"Replace multiple spaces in a string with a single space.",
      "Returns" : [
         {"Desc":"String after white spaces have been trimmed <u>string</u>."},
      ],
      "ParameterTable": false,
      "Parameters": [
         {"string": {"Desc":"String to trim spaces from <u>string</u>."}},
      ],
      "Examples":[
         "   local S = '   replace    multiple   spaces   with  a  single  space   '
         S:compactWS()
         --> ' replace multiple spaces with a single space '
         
         string.compactWS('   replace    multiple   spaces   with  a  single  space   ') 
         --> ' replace multiple spaces with a single space '",
      ],
      "SeeAlso":[
         {
            "Title":"String Manipulation Extensions in our Tools repository ",
            "Link":"http://help.interfaceware.com/v6/stringutil-string-functions"
         },
         {
            "Title":"stringutil.lua - in our code repository.",
            "Link":"http://help.interfaceware.com/code/details/stringutil-lua"
         },
         {
            "Title": "The node module - working with messages in Node Tree format",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#node"
         },
         {
            "Title": "Writing extensions to the node and string libraries",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#ext"
         },
         {
            "Title": "Understanding Lua OO syntax: what the colon operator means",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#colon"
        }
      ]
   }
}

