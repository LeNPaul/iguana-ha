{
   "encrypt": {
      "Returns": [
         {
            "Desc": "The encrypted message, in binary encoding <u>string</u>."
         }
      ],
      "Title": "crypto.rsa.encrypt",
      "SummaryLine": "Encrypts data using an RSA public key.",
      "ParameterTable": true,
      "Parameters": [
         {
            "data": {
               "Desc": "The input to encrypt <u>string</u>."
            }
         },
         {
            "key": {
               "Desc": "The RSA public key <u>string</u>."
            }
         },
         {
            "keyform": {
               "Desc": "The input key format, either <i>pem</i> or <i>der</i> (default = pem) <u>string</u>.",
               "Opt": true
            }
         }
      ],
      "Usage": "crypto.rsa.encrypt{data=&lt;data&gt;, key=&lt;pubkey&gt;[, keyform=&lt;format&gt;]}",
      "Examples": [
         "<pre>local PublicKey = io.open('path/to/public.pem'):read('*a')\nlocal Encrypted = crypto.rsa.encrypt{data='hello', key=PublicKey, keyform='pem'}</pre>"
      ],
      "Desc": "Encrypts data using RSA encryption. The encrypted data can only be decrypted with the corresponding RSA private key.<br />The key size determines the maximum size of the input data. RSA encryption supports a maximum data size equal to the RSA key size (in bytes) minus 11. For example, a 1024-bit RSA key can encrypt a maximum of 117 bytes (binary characters), while a 2048-bit RSA key can encrypt up to 245 bytes. Inputs that are shorter than the maximum are padded with standard PKCS#1 v1.5 padding.<br />RSA public-key encryption uses some randomized components, so each run may result in a different output. This is normal, and they will all result in the original data when decrypted with the corresponding private key."
   },
   "decrypt": {
      "Returns": [
         {
            "Desc": "The decrypted message, in binary encoding <u>string</u>."
         }
      ],
      "Title": "crypto.rsa.decrypt",
      "SummaryLine": "Decrypts data using an RSA private key.",
      "ParameterTable": true,
      "Parameters": [
         {
            "data": {
               "Desc": "The input to decrypt <u>string</u>."
            }
         },
         {
            "key": {
               "Desc": "The RSA private key <u>string</u>."
            }
         },
         {
            "keyform": {
               "Desc": "The input key format, either <i>pem</i> or <i>der</i> (default = pem) <u>string</u>.",
               "Opt": true
            }
         }
      ],
      "Usage": "crypto.rsa.decrypt{data=&lt;data&gt;, key=&lt;privkey&gt;[, keyform=&lt;format&gt;]}",
      "Examples": [
         "<pre>local PrivateKey = io.open('path/to/private.pem'):read('*a')\nlocal Decrypted = crypto.rsa.decrypt{data=Encrypted, key=PrivateKey, keyform='pem'}</pre>"
      ],
      "Desc": "Decrypts data generated using RSA encryption. The data must have been encrypted using the public key corresponding to the input private key.<br />Any padding added by the encryption routine will be automatically removed before returning."
   },
   "encryptPrivate": {
      "Returns": [
         {
            "Desc": "The encrypted message, in binary encoding <u>string</u>."
         }
      ],
      "Title": "crypto.rsa.encryptPrivate",
      "SummaryLine": "Encrypts data using an RSA private key.",
      "ParameterTable": true,
      "Parameters": [
         {
            "data": {
               "Desc": "The input to encrypt <u>string</u>."
            }
         },
         {
            "key": {
               "Desc": "The RSA private key <u>string</u>."
            }
         },
         {
            "keyform": {
               "Desc": "The input key format, either <i>pem</i> or <i>der</i> (default = pem) <u>string</u>.",
               "Opt": true
            }
         }
      ],
      "Usage": "crypto.rsa.encryptPrivate{data=&lt;data&gt;, key=&lt;privkey&gt;[, keyform=&lt;format&gt;]}",
      "Examples": [
         "<pre>local PrivateKey = io.open('path/to/private.pem'):read('*a')\nlocal Encrypted = crypto.rsa.encryptPrivate{data='hello', key=PrivateKey, keyform='pem'}</pre>"
      ],
      "Desc": "Encrypts data using RSA private-key encryption. This is also known as \"signing\" with RSA (not to be confused with <code>crypto.sign</code>).</br />RSA private-key encryption is a low-level primitive used to implement the higher-level notion of a message signature (i.e. <code>crypto.sign</code>). It is generally used on a message digest to generate the higher-level \"signature\" of a message.<br />The resulting encrypted data can only be decrypted with the corresponding public key."
   },
   "decryptPublic": {
      "Returns": [
         {
            "Desc": "The decrypted message, in binary encoding <u>string</u>."
         }
      ],
      "Title": "crypto.rsa.decryptPublic",
      "SummaryLine": "Decrypts data using an RSA public key.",
      "ParameterTable": true,
      "Parameters": [
         {
            "data": {
               "Desc": "The input to decrypt <u>string</u>."
            }
         },
         {
            "key": {
               "Desc": "The RSA public key <u>string</u>."
            }
         },
         {
            "keyform": {
               "Desc": "The input key format, either <i>pem</i> or <i>der</i> (default = pem) <u>string</u>.",
               "Opt": true
            }
         }
      ],
      "Usage": "crypto.rsa.decryptPublic{data=&lt;data&gt;, key=&lt;pubkey&gt;[, keyform=&lt;format&gt;]}",
      "Examples": [
         "<pre>local PublicKey = io.open('path/to/public.pem'):read('*a')\nlocal Decrypted = crypto.rsa.decryptPublic{data=Encrypted, key=PublicKey, keyform='pem'}</pre>"
      ],
      "Desc": "Decrypts data generated using RSA private-key encryption. The data must have been encrypted using the private key corresponding to the input public key.<br />This is a lower-level primitive used to implement the higher-level \"signature\" of a message. When verifying a signature, this method is used to decrypt the message hash and compare it against the incoming message."
   }
}
