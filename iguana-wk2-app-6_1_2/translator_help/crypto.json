
{
   "hmac": {
      "Returns": [
         {
            "Desc": "The keyed-hash message authentication code in binary <u>string</u>."
         }
      ],
      "Title": "crypto.hmac",
      "SummaryLine": "Hash an input with a shared secret.",
      "ParameterTable": true,
      "Parameters": [
         {
            "data": {
               "Desc": "The input to hash <u>string</u> or <u>stream</u>."
            }
         },
         {
            "key": {
               "Desc": "The shared secret <u>string</u>."
            }
         },
         {
            "algorithm": {
               "Desc": "The hashing algorithm <u>string</u>."
            }
         }
      ],
      "Usage": "crypto.hmac{data=&lt;data&gt;, key=&lt;secret&gt;, algorithm=&lt;algorithm&gt;}",
      "Examples": [
         "<pre>local BinaryHmac = crypto.hmac{data='hello', key='key', algorithm='sha1'}</pre>"
      ],
      "SeeAlso": [
         {
            "Title": "The crypto module - Cryptography signing algorithms",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#crypto"
         },
         {
            "Title": "Learn more about the crypto API here.",
            "Link": "http://help.interfaceware.com/v6/signing-data-with-the-crypto-api"
         }
      ],
      "Desc": "Generates a Keyed-Hash Message Authentication code (HMAC) based on input data and a shared secret key. The HMAC can be used to verify the integrity of the data when received by a server using the same input data and the same shared secret, and comparing the results. This scheme requires that both sides (client and server) have access to the same key."
   },
   "sign": {
      "Returns": [
         {
            "Desc": "The RSA or DSA digital signature in binary <u>string</u>."
         }
      ],
      "Title": "crypto.sign",
      "SummaryLine": "Cryptographically sign data with RSA or DSA.",
      "ParameterTable": true,
      "Parameters": [
         {
            "data": {
               "Desc": "The data to sign <u>string</u> or <u>stream</u>."
            }
         },
         {
            "key": {
               "Desc": "The RSA or DSA private key <u>string</u>."
            }
         },
         {
            "algorithm": {
               "Desc": "The hashing algorithm <u>string</u>."
            }
         },
         {
            "keyform": {
               "Desc": "The input key format, either <i>pem</i> or <i>der</i> (default = pem) <u>string</u>.",
               "Opt": true
            }
         }
      ],
      "Usage": "crypto.sign{data=&lt;data&gt;, key=&lt;RSA or DSA private key&gt;, algorithm=&lt;algorithm&gt;}",
      "Examples": [
         "<pre>local PrivateKey = io.open('path/to/private.pem'):read('*a')\nlocal BinarySignature = crypto.sign{data='hello', key=PrivateKey, algorithm='sha1'}</pre>"
      ],
      "SeeAlso": [
         {
            "Title": "The crypto module - Cryptography signing algorithms",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#crypto"
         },
         {
            "Title": "Learn more about the crypto API here.",
            "Link": "http://help.interfaceware.com/v6/signing-data-with-the-crypto-api"
         }
      ],
      "Desc": "Used to sign documents with either RSA or DSA private keys. Signatures are generated with private keys and verified with public keys."
   },
   "verify": {
      "Returns": [
         {
            "Desc": "Whether or not the signature is valid <u>boolean</u>."
         }
      ],
      "Title": "crypto.verify",
      "SummaryLine": "Verify the validity of a signature.",
      "ParameterTable": true,
      "Parameters": [
         {
            "data":
            {
               "Desc": "The data to verify <u>string</u>"
            }
         },
         {
            "algorithm":
            {
               "Desc": "The hashing algorithm <u>string</u>."
            }
         },
         {
            "key":
            {
               "Desc": "The RSA or DSA public key <u>string</u>."
            }
         },
         {
            "keyform": {
               "Desc": "The input key format, either <i>pem</i> or <i>der</i> (default = pem) <u>string</u>.",
               "Opt": true
            }
         },
         {
            "signature":
            {
               "Desc": "The RSA or DSA digital signature <u>string</u>."
            }
         }
      ],
      "Usage": "crypto.verify{data=&lt;data&gt;, key=&lt;RSA or DSA public key&gt;, algorithm=&lt;algorithm&gt;, signature=&lt;signature&gt;}",
      "Examples": [
         "<pre>local PublicKey = io.open('path/to/public.pem'):read('*a')\nlocal IsValid = crypto.verify{data='hello', key=PublicKey, algorithm='sha1', signature=Signature}</pre>"
      ],
      "SeeAlso": [
         {
            "Title": "The crypto module - Cryptography signing algorithms",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#crypto"
         },
         {
            "Title": "Learn more about the crypto API here.",
            "Link": "http://help.interfaceware.com/v6/signing-data-with-the-crypto-api"
         }
      ],
      "Desc": "Used to verify the validity of an RSA or DSA signature. Note that verification only requires a public key."
   },
   "digest": {
      "Returns": [
         {
            "Desc": "The checksum of the input data in binary <u>string</u>."
         }
      ],
      "Title": "crypto.digest",
      "SummaryLine": "Produces checksums of input data using the specified hashing algorithm.",
      "ParameterTable": true,
      "Parameters": [
         {
            "data":
            {
               "Desc": "The data to checksum <u>string</u> or <u>stream</u>."
            }
         },
         {
            "algorithm":
            {
               "Desc": "The message digest algorithm to use (e.g. SHA1) <u>string</u>."
            }
         }
      ],
      "Usage": "crypto.digest{data=&lt;data&gt;, algorithm=&lt;algorithm&gt;}",
      "Examples": [
         "<pre>local BinaryChecksum = crypto.digest{data='hello', algorithm='sha1'}</pre>"
      ],
      "SeeAlso": [
         {
            "Title": "The crypto module - Cryptography signing algorithms",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#crypto"
         },
         {
            "Title": "Learn more about the crypto API here.",
            "Link": "http://help.interfaceware.com/v6/signing-data-with-the-crypto-api"
         }
      ],
      "Desc": "Computes a binary checksum of input data using a specified hashing algorithm."
   },
   "algorithms": {
      "Returns": [
         {
            "Desc": "The list of supported digest algorithms <u>table</u>."
         }
      ],
      "Title": "crypto.algorithms",
      "SummaryLine": "<b>Deprecated:</b> Fetches the list of supported digest algorithms.",
      "Parameters": [],
      "Usage": "crypto.algorithms()",
      "Examples": [
         "<pre>local DigestAlgorithms = crypto.algorithms()\nlocal Digest = crypto.digest{data='hello', algorithm=DigestAlgorithms[1]}</pre>"
      ],
      "SeeAlso": [
         {
            "Title": "The crypto module - Cryptography signing algorithms",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#crypto"
         },
         {
            "Title": "Learn more about the crypto API here.",
            "Link": "http://help.interfaceware.com/v6/signing-data-with-the-crypto-api"
         }
      ],
      "Desc": "<b>Deprecated:</b> Use <code>crypto.library.digests</code> instead.<br />Requests a full list of available digest algorithms from OpenSSL. Note that digest algorithms are case-insensitive, and may appear in uppercase or lowercase.<br /><br />Certain digest algorithms are not meant to be used with certain crypto methods. For example, most applications expect only \"DSA-SHA\" to be used when signing with a DSA private key, and may not accept anything other than \"DSA-SHA\" when attempting to verify the signature."
   },
   "pbkdf2": {
      "Returns": [
         {
            "Desc": "The derived key <u>string</u>."
         }
      ],
      "Title": "crypto.pbkdf2",
      "SummaryLine": "Derives a secure key from an input password.",
      "ParameterTable": true,
      "Parameters": [
         {
            "password": {
               "Desc": "The password to derive the key from <u>string</u>."
            }
         },
         {
            "salt": {
               "Desc": "A random, binary-encoded salt <u>string</u>."
            }
         },
         {
            "iterations": {
               "Desc": "Number of calculation cycles (default = 2048) <u>integer</u>.",
               "Opt": true
            }
         },
         {
            "algorithm": {
               "Desc": "The message digest algorithm to use (default = SHA1) <u>string</u>.",
               "Opt": true
            }
         }
      ],
      "Usage": "crypto.pbkdf2{password=&lt;password&gt;, salt=&lt;salt&gt;[, iterations=2048][, algorithm='sha1']}",
      "Examples": [
         "<pre>local Key = crypto.pbkdf2{password='password', salt='12345678'}\nlocal KeyHex = filter.hex.enc(Key)\ntrace(KeyHex)\n--&gt; 647F7D6E20297DD71D1338592943185A91DA4E7548CB71C5ED0001876797536E0FAE3744616903A35E9D675E5E8F93CE85D63236FE3730123A8C940A74094924</pre>"
      ],
      "Desc": "Derives a secure encryption key from an input password and randomized salt. The resulting key is computationally expensive to compute, and is at least as long as the digest size, so it's highly resistant to brute-force password attacks.<br />The same parameters (password, salt, iterations, and hash algorithm) will always result in the same output key. This makes it ideal for strenghtening a potentially insecure password and/or storing it in a database.<br />The salt does not need to be kept secure. It is only used as a randomization offset to make it harder to brute-force the password."
   }
}
