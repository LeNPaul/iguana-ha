{
   "serialize": {
      "SummaryLine": "Serializes a Lua table as a JSON formatted string.",
      "Returns": [
         {
            "Desc": "The Lua table serialized as JSON <u>string</u>."
         }
      ],
      "Parameters": [
         {
            "data": {
               "Desc": "A table from which JSON will be generated  <u>table</u>."
            }
         },
         {
            "compact": {
               "Desc": "If true, output will not be pretty-printed (default = false) <u>boolean</u>.",
               "Opt": true
            }
         },
         {
            "alphasort": {
               "Desc": "Sort table keys alphabetically if true (default = false) <u>boolean</u>.",
               "Opt": true
            }
         }
      ],
      "Title": "json.serialize",
      "Usage": "json.serialize{data=&#60;value&#62; [, compact=true|false, alphasort=true|false]}",
      "Examples": [
         "<pre>local Json = json.serialize{data=Data}</pre>"
      ],
      "ParameterTable": true,
      "SeeAlso": [
         {
            "Title": "The json module - working with JSON",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#json"
         },
         {
            "Title": "Using JSON in the translator",
            "Link": "http://help.interfaceware.com/v6/auto-completion?v=6.0.0#json"
         },
         {
            "Title": "Serializing as JSON",
            "Link": "http://help.interfaceware.com/v6/dehydrating-and-rehydrating-hl7-messages?v=6.0.0#json"
         },
         {
            "Title": "Parse and serialize JSON",
            "Link": "http://help.interfaceware.com/code/details/parse-and-serialize-json?v=6.0.0"
         },
         {
            "Title": "Dehydrate (serialize) as JSON",
            "Link": "http://help.interfaceware.com/code/details/dehydrate-serialize-as-json?v=6.0.0"
         }
      ],
      "Desc": "Serializes a Lua table as a JSON formatted string."
   },
   "parse": {
      "SummaryLine": "Parses a JSON document.",
      "Returns": [
         {
            "Desc": "A Lua table containing the parsed data <u>table</u>."
         }
      ],
      "Parameters": [
         {
            "data": {
               "Desc": "A string containing the JSON to be parsed  <u>string</u>."
            }
         }
      ],
      "Title": "json.parse",
      "Usage": "json.parse{data=&#60;value&#62;} <b>or</b> json.parse(&#60;value&#62;)",
      "Examples": [
         "<pre>local Msg = json.parse{data=Data}</pre>"
      ],
      "ParameterTable": true,
      "SeeAlso": [
         {
            "Title": "The json module - working with JSON",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#json"
         },
         {
            "Title": "Using JSON in the translator",
            "Link": "http://help.interfaceware.com/v6/auto-completion?v=6.0.0#json"
         },
         {
            "Title": "Serializing as JSON",
            "Link": "http://help.interfaceware.com/v6/dehydrating-and-rehydrating-hl7-messages?v=6.0.0#json"
         },
         {
            "Title": "Parse and serialize JSON",
            "Link": "http://help.interfaceware.com/code/details/parse-and-serialize-json?v=6.0.0"
         },
         {
            "Title": "Dehydrate (serialize) as JSON",
            "Link": "http://help.interfaceware.com/code/details/dehydrate-serialize-as-json?v=6.0.0"
         },
         {
            "Title": "Node types for Iguana node trees",
            "Link": "http://help.interfaceware.com/v6/node-types-for-iguana-node-trees?v=6.0.0"
         }
      ],
      "Desc": "Parses a message in JSON format into its components and creates a table containing these components."
   },
   "createObject": {
      "Title": "json.createObject",
      "SummaryLine": "Creates an empty JSON object.",
      "Usage": "json.createObject()",
      "Examples": [
         "<pre>local obj = json.createObject{data=Data}</pre>",
         "<pre>-- show that createObject() just returns a \"<b>disguised</b>\" Lua table\nlocal obj = json.createObject() -- annotation  = <b>json_empty_object</b>\ntrace(type(obj))                -- object type = <b>table</b></pre>",
      ],
      "Returns": [
         {
            "Desc": "An empty JSON object <u>table</u>."
         }
      ],
      "Parameters": [],
      "SeeAlso": [
         {
            "Title": "The json module - working with JSON",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#json"
         },
         {
            "Title": "Using JSON in the translator",
            "Link": "http://help.interfaceware.com/v6/auto-completion?v=6.0.0#json"
         },
         {
            "Title": "Serializing as JSON",
            "Link": "http://help.interfaceware.com/v6/dehydrating-and-rehydrating-hl7-messages?v=6.0.0#json"
         },
         {
            "Title": "Parse and serialize JSON",
            "Link": "http://help.interfaceware.com/code/details/parse-and-serialize-json?v=6.0.0"
         },
         {
            "Title": "Node types for Iguana node trees",
            "Link": "http://help.interfaceware.com/v6/node-types-for-iguana-node-trees?v=6.0.0"
         }
      ],
      "Desc": "Creates an empty JSON object. This is useful for distinguishing between an empty object and an empty Lua table.<br><br><b>Note: </b>you might expect that this function would return a node tree - it does not, it returns a Lua table labelled/annotated as \"json_empty_object\". The label is only for convenience/documentation purposes - you can just use tables for JSON objects (see examples)."
   }
}
