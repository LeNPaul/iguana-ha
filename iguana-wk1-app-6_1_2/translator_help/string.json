{
   "sub": {
      "Returns": [
         {
            "Desc": "The specified substring  <u>string</u>."
         }
      ],
      "Title": "string.sub",
      "SummaryLine": "Returns a substring from a string.",
      "Examples": [
         "<pre>local AString = 'Fred'\nlocal ASubString=AString:sub(1,1)\n\n-- which is shorthand for:\nlocal ASubString=string.sub(AString,1,1)</pre>"
      ],
      "Parameters": [
         {
            "i": {
               "Desc": "Start position <u>integer</u>.",
               "Opt": true
            }
         }, 
         { 
            "j": { 
                  "Desc": "End position <u>integer</u>.", "Opt": true 
            } 
         }
      ],
      "Usage": "string:sub(i [, j])",
      "SeeAlso": [
         {
            "Title": "The string module - string operations",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#string"
         },
         {
            "Title": "Using negative indexes with string:sub()",
            "Link": "http://help.interfaceware.com/using-negative-indexes-with-stringsub.html?v=6.0.0"
         },
         {
            "Title": "Get part of a string",
            "Link": "http://help.interfaceware.com/code/details/get-part-of-a-string?v=6.0.0"
         },
         {
            "Title": "Extending the string library",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#ext"
         },
         {
            "Title": "Online documentation for string.sub",
            "Link": "http://www.lua.org/manual/5.1/manual.html#pdf-string.sub"
         },
         {
            "Title": "Strings Tutorial",
            "Link": "http://lua-users.org/wiki/StringsTutorial"
         },
         {
            "Title": "String Library Tutorial",
            "Link": "http://lua-users.org/wiki/StringLibraryTutorial"
         },
         {
            "Title": "String Recipes",
            "Link": "http://lua-users.org/wiki/StringRecipes"
         },
         {
            "Title": "Patterns Tutorial",
            "Link": "http://lua-users.org/wiki/PatternsTutorial"
         },
         {
            "Title": "Understanding Lua OO syntax: what the colon operator means",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks#colon?v=6.0.0"
         }
      ],
      "Desc": "Returns the substring of <code>s</code> that starts at <code>i</code>  and continues until <code>j</code>; <code>i</code> and <code>j</code> can be negative. If <code>j</code> is absent, then it is assumed to be equal to -1 (which is the same as the string length). In particular, the call <code>string.sub(s,1,j)</code> returns a prefix of <code>s</code> with length <code>j</code>, and <code>string.sub(s, -i)</code> returns a suffix of <code>s</code> with length <code>i</code>.<br><br>The most convenient way to invoke sub is using the method syntax like MyString:sub(1,3)."
   },
   "find": {
      "Returns": [
         {
            "Desc": "Index for start of match or nil if no match found  <u>integer or nil</u>."
         },
         {
            "Desc": "Index for end of match (not returned if no match)  <u>string</u>."
         }
      ],
      "Title": "string.find",
      "SummaryLine": "Finds the first match to the supplied pattern and returns the position.",
      "Parameters": [
         {
            "pattern": {
               "Desc": "Pattern to be matched <u>string</u>."
            }
         },
         {
            "init": {
               "Desc": "Position to start the search <u>string</u>.",
               "Opt": true
            }
         },
         {
            "plain": {
               "Desc": "Turn off pattern matching (default = false) <u>boolean</u>.",
               "Opt": true
            }
         }
      ],
      "Usage": "string:find(pattern [, init [, plain]])",
      "Examples": [
         "<pre>local s= 'Hello Lua user are you enjoying Lua?'\nlocal ix1, ix2=s:find('Lua') --&gt; 7,9</pre><br>-- which is shorthand for: <br>local ix1, ix2  = string.find(s,'Lua')",
         "<pre>local s= 'Hello Lua user are you enjoying Lua?'\nlocal ix1, ix2=s:find('Lua', 10) --&gt; 33,35</pre>",
         "<pre>-- start search 5 characters from the end of the string\nlocal s= 'Hello Lua user are you enjoying Lua?'\nlocal ix1, ix2=s:find('Lua', -5) --&gt; 33,35</pre>",
         "<pre>-- capture the \"pair\" but not \"=\" sign\npair = 'name = Anna'\n_, _, key, value = pair:find('(&percnt;a+)&percnt;s*=&percnt;s*(&percnt;a+)')\nprint(key, value)  --&gt; name  Anna</pre>"
      ],
      "SeeAlso": [
         {
            "Title": "The string module - string operations",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#string"
         },
         {
            "Title": "Find text within a string",
            "Link": "http://help.interfaceware.com/code/details/find-a-string-within-a-string?v=6.0.0"
         },
         {
            "Title": "Extending the string library",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#ext"
         },
         {
            "Title": "Online documentation for string.find",
            "Link": "http://www.lua.org/manual/5.1/manual.html#pdf-string.find"
         },
         {
            "Title": "Strings Tutorial",
            "Link": "http://lua-users.org/wiki/StringsTutorial"
         },
         {
            "Title": "String Library Tutorial",
            "Link": "http://lua-users.org/wiki/StringLibraryTutorial"
         },
         {
            "Title": "String Recipes",
            "Link": "http://lua-users.org/wiki/StringRecipes"
         },
         {
            "Title": "Patterns Tutorial",
            "Link": "http://lua-users.org/wiki/PatternsTutorial"
         },
         {
            "Title": "Understanding Lua OO syntax: what the colon operator means",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks#colon?v=6.0.0"
         }
      ],
      "Desc": "Looks for the first match of <code>pattern</code> in the string <code>s</code>. If it finds a match, then <code>find</code> returns the indices of&nbsp;<code>s</code> where this occurrence starts and ends; otherwise, it returns <b>nil</b>. A third, optional numerical argument <code>init</code> specifies where to start the search; its default value is&nbsp;1 and can be negative. A value of <b>true</b> as a fourth, optional argument <code>plain</code> turns off the pattern matching facilities, so the function does a plain \"find substring\" operation, with no characters in <code>pattern</code> being considered \"magic\". <br><br><b>Note:</b> if <code>plain</code> is given, then <code>init</code> must be given as well. If the pattern has captures, then in a successful match the captured values are also returned, after the two indices."
   },
   "byte": {
      "Returns": [
         {
            "Desc": "Multiple returns: One numerical code for each requested character <u>integer</u>."
         }
      ],
      "Title": "string.byte",
      "SummaryLine": "Returns the internal numerical codes of the supplied characters.",
      "Examples": [
         "local AString = 'ABC'<br>local A,B,C = AString:byte(1,3)<br><br>-- which is shorthand for: <br>local A,B,C = string.byte(AString,1,3)",
      ],
      "Parameters": [
         {
            "i": {
               "Desc": "Start position <u>integer</u>.",
               "Opt": true
            }
         },
         {
            "j": {
               "Desc": "End position <u>integer</u>.",
               "Opt": true
            }
         }
      ],
      "Usage": "string:byte([i [, j]])",
      "SeeAlso": [
         {
            "Title": "The string module - string operations",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#string"
         },
         {
            "Title": "Dealing with binary data",
            "Link": "http://help.interfaceware.com/v6/working-with-databases?v=6.0.0#menu10"
         },
         {
            "Title": "Extending the string library",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#ext"
         },
         {
            "Title": "Online documentation for string.byte",
            "Link": "http://www.lua.org/manual/5.1/manual.html#pdf-string.byte"
         },
         {
            "Title": "Strings Tutorial",
            "Link": "http://lua-users.org/wiki/StringsTutorial"
         },
         {
            "Title": "String Library Tutorial",
            "Link": "http://lua-users.org/wiki/StringLibraryTutorial"
         },
         {
            "Title": "String Recipes",
            "Link": "http://lua-users.org/wiki/StringRecipes"
         },
         {
            "Title": "Patterns Tutorial",
            "Link": "http://lua-users.org/wiki/PatternsTutorial"
         },
         {
            "Title": "Understanding Lua OO syntax: what the colon operator means",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks#colon?v=6.0.0"
         }
      ],
      "Desc": "Returns the internal numerical codes of the characters <code>s[i]</code>, <code>s[i+1]</code>, &middot;&middot;&middot;, <code>s[j]</code>. The default value for <code>i</code> is&nbsp;1; the default value for <code>j</code> is&nbsp;<code>i</code>.<br><br><b>Note:</b> that numerical codes are not necessarily portable across platforms."
   },
   "reverse": {
      "Returns": [
         {
            "Desc": "The string in the reverse order  <u>string</u>."
         }
      ],
      "Title": "string.reverse",
      "SummaryLine": "Reverses the order of a string.",
      "Parameters": [],
      "Usage": "string:reverse()",
      "Examples": [
         "local s = \"12345\"<br>local r = s:reverse()<br>-->\"54321\"<br><br>-- which is shorthand for:<br>local r = string.reverse(s)"      ],
      "SeeAlso": [
         {
            "Title": "The string module - string operations",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#string"
         },
         {
            "Title": "Extending the string library",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#ext"
         },
         {
            "Title": "Online documentation for string.reverse",
            "Link": "http://www.lua.org/manual/5.1/manual.html#pdf-string.reverse"
         },
         {
            "Title": "Strings Tutorial",
            "Link": "http://lua-users.org/wiki/StringsTutorial"
         },
         {
            "Title": "String Library Tutorial",
            "Link": "http://lua-users.org/wiki/StringLibraryTutorial"
         },
         {
            "Title": "String Recipes",
            "Link": "http://lua-users.org/wiki/StringRecipes"
         },
         {
            "Title": "Patterns Tutorial",
            "Link": "http://lua-users.org/wiki/PatternsTutorial"
         },
         {
            "Title": "Understanding Lua OO syntax: what the colon operator means",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks#colon?v=6.0.0"
         }
      ],
      "Desc": "Returns a string in the reversed order."
   },
   "rep": {
      "Returns": [
         {
            "Desc": "A string that is the concatenation of <code>n</code> copies of the string <code>s</code>  <u>string</u>."
         }
      ],
      "Title": "string.rep",
      "SummaryLine": "Concatenates <code>n</code> of a string.",
      "Examples": [
         "local s = \"Hello!\"<br>local r = s:rep(2)<br>-->\"Hello!Hello!\"<br><br>-- which is shorthand for:<br>local r = string.rep(s, 2)" 
     ],
      "Parameters": [
         {
            "n": {
               "Desc": "Number of copies to concatenate <u>integer</u>."
            }
         }
      ],
      "Usage": "string:rep(n)",
      "SeeAlso": [
         {
            "Title": "The string module - string operations",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#string"
         },
         {
            "Title": "Extending the string library",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#ext"
         },
         {
            "Title": "Online documentation for string.rep",
            "Link": "http://www.lua.org/manual/5.1/manual.html#pdf-string.rep"
         },
         {
            "Title": "Strings Tutorial",
            "Link": "http://lua-users.org/wiki/StringsTutorial"
         },
         {
            "Title": "String Library Tutorial",
            "Link": "http://lua-users.org/wiki/StringLibraryTutorial"
         },
         {
            "Title": "String Recipes",
            "Link": "http://lua-users.org/wiki/StringRecipes"
         },
         {
            "Title": "Patterns Tutorial",
            "Link": "http://lua-users.org/wiki/PatternsTutorial"
         },
         {
            "Title": "Understanding Lua OO syntax: what the colon operator means",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks#colon?v=6.0.0"
         }
      ],
      "Desc": "Returns a string that is the concatenation of <code>n</code> copies of the string <code>s</code>."
   },
   "match": {
      "Returns": [
         {
            "Desc": "Either the matching string <u>string</u>. <strong>OR</strong> multiple returns: One for each matching capture  <u>string</u>."
         }
      ],
      "Title": "string.match",
      "SummaryLine": "Finds the first match to the supplied pattern and returns pattern captures.",
      "Parameters": [
         {
            "pattern": {
               "Desc": "Pattern to be matched <u>string</u>."
            }
         },
         {
            "init": {
               "Desc": "Position to start the search <u>string</u>.",
               "Opt": true
            }
         }
      ],
      "Usage": "string:match(pattern [, init])",
      "Examples": [
         "<pre>local s='Hello World'\ns:match('Hello') --&gt; \"Hello\"\n\n-- which is shorthand for:\ns.match(s, 'Hello')</pre>",
         "<pre>local s='hello Lua user are you enjoying Lua today'\ns:match('Lua&percnt;s(&percnt;a+)') --&gt; \"user\"\ns:match('Lua&percnt;s(&percnt;a+)',20) --&gt; \"today\"\ns:match('Lua&percnt;s(&percnt;a+)',-10) --&gt; \"today\"</pre>"
      ],
      "SeeAlso": [
         {
            "Title": "The string module - string operations",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#string"
         },
         {
            "Title": "Extending the string library",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#ext"
         },
         {
            "Title": "Online documentation for string.match",
            "Link": "http://www.lua.org/manual/5.1/manual.html#pdf-string.match"
         },
         {
            "Title": "Strings Tutorial",
            "Link": "http://lua-users.org/wiki/StringsTutorial"
         },
         {
            "Title": "String Library Tutorial",
            "Link": "http://lua-users.org/wiki/StringLibraryTutorial"
         },
         {
            "Title": "String Recipes",
            "Link": "http://lua-users.org/wiki/StringRecipes"
         },
         {
            "Title": "Patterns Tutorial",
            "Link": "http://lua-users.org/wiki/PatternsTutorial"
         },
         {
            "Title": "Understanding Lua OO syntax: what the colon operator means",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks#colon?v=6.0.0"
         }
      ],
      "Desc": "Looks for the first <em>match</em> of <code>pattern</code> in the string <code>s</code>. If it finds one, then <code>match</code> returns the captures from the pattern; otherwise it returns <b>nil</b>. If <code>pattern</code> specifies no captures, then the whole match is returned. A third, optional numerical argument <code>init</code> specifies where to start the search; its default value is&nbsp;1 and can be negative."
   },
   "char": {
      "Returns": [
         {
            "Desc": "A string representing the supplied numerical codes  <u>string</u>."
         }
      ],
      "Title": "string.char",
      "SummaryLine": "Converts numerical codes to characters.",
      "SeeAlso": [
         {
            "Title": "The string module - string operations",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#string"
         },
         {
            "Title": "Extending the string library",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#ext"
         },
         {
            "Title": "Online documentation for string.char",
            "Link": "http://www.lua.org/manual/5.1/manual.html#pdf-string.char"
         },
         {
            "Title": "Strings Tutorial",
            "Link": "http://lua-users.org/wiki/StringsTutorial"
         },
         {
            "Title": "String Library Tutorial",
            "Link": "http://lua-users.org/wiki/StringLibraryTutorial"
         },
         {
            "Title": "String Recipes",
            "Link": "http://lua-users.org/wiki/StringRecipes"
         },
         {
            "Title": "Patterns Tutorial",
            "Link": "http://lua-users.org/wiki/PatternsTutorial"
         },
         {
            "Title": "Understanding Lua OO syntax: what the colon operator means",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks#colon?v=6.0.0"
         }
      ],
      "Parameters": [
         {
            "code": {
               "Desc": "Multiple parameters: Integer representing a character <u>integer</u>."
            }
         }
      ],
      "Usage": "string.char(code, ...)",
      "Examples": [
         "<pre>local ABC = string.char(65,66,67)</pre>"
      ],
      "Desc": "Receives zero or more integers. Returns a string with length equal to the number of arguments, in which each character has the internal numerical code equal to its corresponding argument.<br><br><b>Note:</b> Numerical codes are not necessarily portable across platforms."
   },
   "dump": {
      "Returns": [
         {
            "Desc": "A string containing a binary representation of the given function  <u>string</u>."
         }
      ],
      "Title": "string.dump",
      "SummaryLine": "Returns a binary representation of the given function.",
      "Examples": [
         "<pre>function Boom()\n   return 'Bang'\nend\n\nfunction main()\n   local A = string.dump(Boom)\n   local Func = loadstring(A)\n   local Bang = Func(Boom)\nend</pre>"
      ],
      "Parameters": [
         {
            "function": {
               "Desc": "Function to be dumped <u>function</u>."
            }
         }
      ],
      "Usage": "string.dump(function)",
      "SeeAlso": [
         {
            "Title": "The string module - string operations",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#string"
         },
         {
            "Title": "Extending the string library",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#ext"
         },
         {
            "Title": "Online documentation for string.dump",
            "Link": "http://www.lua.org/manual/5.1/manual.html#pdf-string.dump"
         },
         {
            "Title": "Strings Tutorial",
            "Link": "http://lua-users.org/wiki/StringsTutorial"
         },
         {
            "Title": "String Library Tutorial",
            "Link": "http://lua-users.org/wiki/StringLibraryTutorial"
         },
         {
            "Title": "String Recipes",
            "Link": "http://lua-users.org/wiki/StringRecipes"
         },
         {
            "Title": "Patterns Tutorial",
            "Link": "http://lua-users.org/wiki/PatternsTutorial"
         },
         {
            "Title": "Understanding Lua OO syntax: what the colon operator means",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks#colon?v=6.0.0"
         }
      ],
      "Desc": "Returns a string containing a binary representation of the given function, so that a later <code>loadstring</code> on this string returns a copy of the function. <br><br><b>Note:</b> <code>function</code> must be a Lua function without upvalues."
   },
   "gsub": {
      "Returns": [
         {
            "Desc": "A copy of <code>s</code> in which the specified occurrences of the <code>pattern</code> been replaced  <u>string</u>."
         }
      ],
      "Title": "string.gsub",
      "SummaryLine": "String find and replace pattern matches in a string.",
      "Parameters": [
         {
            "pattern": {
               "Desc": "Pattern to be matched <u>string</u>."
            }
         },
         {
            "repl": {
               "Desc": "Replacement <u>string</u> <strong>OR</strong> <u>function</u> <strong>OR</strong> <u>table</u>."
            }
         },
         {
            "n": {
               "Desc": "Maximum number of matches to substitute <u>integer</u>.",
               "Opt": true
            }
         }
      ],
      "Usage": "string:gsub(pattern, repl [, n])",
      "Examples": [
         "<pre>local s = \"hello world\"\nx = s:gsub(\"(&percnt;w+)\", \"&percnt;1 &percnt;1\")\n--&gt; x=\"hello hello world world\"\n\n-- which is shorthand for:\nx = string.gsub(s, \"(&percnt;w+)\", \"&percnt;1 &percnt;1\")</pre>",
         "<pre>local s = \"hello world\"\nx = s:gsub(\"&percnt;w+\", \"&percnt;0 &percnt;0\", 1)\n--&gt; x=\"hello hello world\"</pre>",
         "<pre>local s = \"hello world from Lua\"\nx = s:gsub(\"(&percnt;w+)&percnt;s*(&percnt;w+)\", \"&percnt;2 &percnt;1\")\n--&gt; x=\"world hello Lua from\"</pre>",
         "<pre>local s = \"home = $HOME, user = $USER\"\nx = s:gsub(\"&percnt;$(&percnt;w+)\", os.getenv)\n--&gt; x=\"home = /home/roberto, user = roberto\"</pre>" ,
         "<pre>x = string.gsub(\"4+5 = $return 4+5$\", \"&percnt;$(.-)&percnt;$\", function (s)\n      return loadstring(s)()\n    end)\n--&gt; x=\"4+5 = 9\"</pre>",
         "<pre>local t = {name=\"lua\", version=\"5.1\"}\n   x = string.gsub(\"$name-$version.tar.gz\", \"&percnt;$(&percnt;w+)\", t)\n--&gt; x=\"lua-5.1.tar.gz\"</pre>"
      ],
      "SeeAlso": [
         {
            "Title": "The string module - string operations",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#string"
         },
         {
            "Title": "Replace text in a string",
            "Link": "http://help.interfaceware.com/code/details/find-and-replace-text-in-a-string?v=6.0.0"
         },
         {
            "Title": "Remove selected characters from any HL7 field for any message, master string.gsub() replacements",
            "Link": "http://help.interfaceware.com/remove-selected-characters-from-any-hl7-field-for-any-message-master-string-gsub-replacements.html?v=6.0.0"
         },
         {
            "Title": " Automatic TA1 acknowledgment to X12 messages ",
            "Link": "http://help.interfaceware.com/v6/automatic-ta1-acknowledgment-to-x12-messages?v=6.0.0"
         },
         {
            "Title": "Extending the string library",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#ext"
         },
         {
            "Title": "Online documentation for string.gsub",
            "Link": "http://www.lua.org/manual/5.1/manual.html#pdf-string.gsub"
         },
         {
            "Title": "Strings Tutorial",
            "Link": "http://lua-users.org/wiki/StringsTutorial"
         },
         {
            "Title": "String Library Tutorial",
            "Link": "http://lua-users.org/wiki/StringLibraryTutorial"
         },
         {
            "Title": "String Recipes",
            "Link": "http://lua-users.org/wiki/StringRecipes"
         },
         {
            "Title": "Patterns Tutorial",
            "Link": "http://lua-users.org/wiki/PatternsTutorial"
         },
         {
            "Title": "Understanding Lua OO syntax: what the colon operator means",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks#colon?v=6.0.0"
         }
      ],
      "Desc": "Returns a copy of <code>s</code> in which all (or the first <code>n</code>, if given) occurrences of the <code>pattern</code> have been replaced by a replacement string specified by <code>repl</code>, which can be a string, a table, or a function. <code>gsub</code> also returns, as its second value, the total number of matches that occurred.<br><br>If <code>repl</code> is a string, then its value is used for replacement. The character&nbsp;<code>&percnt;</code> works as an escape character: any sequence in <code>repl</code> of the form <code>&percnt;<em>n</em></code>, with <em>n</em> between 1 and 9, stands for the value of the <em>n</em>-th captured substring (see below). The sequence <code>&percnt;0</code> stands for the whole match. The sequence <code>&percnt;&percnt;</code> stands for a single&nbsp;<code>&percnt;</code>. If <code>repl</code> is a table, then the table is queried for every match, using the first capture as the key; if the pattern specifies no captures, then the whole match is used as the key.If <code>repl</code> is a function, then this function is called every time a match occurs, with all captured substrings passed as arguments, in order; if the pattern specifies no captures, then the whole match is passed as a sole argument.If the value returned by the table query or by the function call is a string or a number, then it is used as the replacement string; otherwise, if it is <b>false</b> or <b>nil</b>, then there is no replacement (that is, the original match is kept in the string)."
   },
   "upper": {
      "Returns": [
         {
            "Desc": "A copy of the string with all lowercase letters changed to uppercase <u>string</u>."
         }
      ],
      "Title": "string.upper",
      "SummaryLine": "Converts a string to uppercase.",
      "Parameters": [],
      "Usage": "string:upper()",
      "Examples": [
         "local s = \"hello world\"<br>local r = s:upper()<br>--> \"HELLO WORLD\"<br><br>-- which is shorthand for:<br>local r = string.upper(s)"
      ],
      "SeeAlso": [
         {
            "Title": "The string module - string operations",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#string"
         },
         {
            "Title": "Convert a string to upper or lower case",
            "Link": "http://help.interfaceware.com/code/details/convert-a-string-to-upper-or-lower-case?v=6.0.0"
         },
         {
            "Title": "Extending the string library",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#ext"
         },
         {
            "Title": "Online documentation for string.upper",
            "Link": "http://www.lua.org/manual/5.1/manual.html#pdf-string.upper"
         },
         {
            "Title": "Strings Tutorial",
            "Link": "http://lua-users.org/wiki/StringsTutorial"
         },
         {
            "Title": "String Library Tutorial",
            "Link": "http://lua-users.org/wiki/StringLibraryTutorial"
         },
         {
            "Title": "String Recipes",
            "Link": "http://lua-users.org/wiki/StringRecipes"
         },
         {
            "Title": "Patterns Tutorial",
            "Link": "http://lua-users.org/wiki/PatternsTutorial"
         },
         {
            "Title": "Understanding Lua OO syntax: what the colon operator means",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks#colon?v=6.0.0"
         }
      ],
      "Desc": "Receives a string and returns a copy of this string with all lowercase letters changed to uppercase. All other characters are left unchanged. The definition of what a lowercase letter is depends on the current locale."
   },
   "len": {
      "Returns": [
         {
            "Desc": "The length of the string <u>integer</u>."
         }
      ],
      "Title": "string.len",
      "SummaryLine": "Returns the length of a string.",
      "Parameters": [],
      "Usage": "string:len()",
      "SeeAlso": [
         {
            "Title": "The string module - string operations",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#string"
         },
         {
            "Title": "What is the difference between the \"#\" operator and string.len(s) function?",
            "Link": "http://help.interfaceware.com/what-is-the-difference-between-the-operator-and-string-lens-function.html?v=6.0.0"
         },
         {
            "Title": "Find the length of a string",
            "Link": "http://help.interfaceware.com/code/details/find-the-length-of-a-string?v=6.0.0"
         },
         {
            "Title": "Extending the string library",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#ext"
         },
         {
            "Title": "Online documentation for string.len",
            "Link": "http://www.lua.org/manual/5.1/manual.html#pdf-string.len"
         },
         {
            "Title": "Strings Tutorial",
            "Link": "http://lua-users.org/wiki/StringsTutorial"
         },
         {
            "Title": "String Library Tutorial",
            "Link": "http://lua-users.org/wiki/StringLibraryTutorial"
         },
         {
            "Title": "String Recipes",
            "Link": "http://lua-users.org/wiki/StringRecipes"
         },
         {
            "Title": "Patterns Tutorial",
            "Link": "http://lua-users.org/wiki/PatternsTutorial"
         },
         {
            "Title": "Understanding Lua OO syntax: what the colon operator means",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks#colon?v=6.0.0"
         }
      ],
      "Examples": [
         "local length = s:len()<br><br>-- which is shorthand for: <br>local length = string.len(s)",
         "<pre>local s = 'abcd'\ntrace(#s, s:len(), string.len(s), s.len(s))\n--> trace(4,4,4,4)</pre>"
      ],
      "Desc": "Receives a string and returns its length. The empty string <code>\"\"</code> has length 0. Embedded zeros are counted, so <code>\"a\\000bc\\000\"</code> has length 5.<br><br><b>Note:</b> <code>string:len()</code> is equivalent to <code>#string</code> (the # operator will also return the length of a table)."
   },
   "format": {
      "Returns": [
         {
            "Desc": "A string formatted as specified <u>string</u>."
         }
      ],
      "Title": "string.format",
      "SummaryLine": "Formats strings.",
      "Parameters": [
         {
            "formatstring": {
               "Desc": "Format string <u>string</u>."
            }
         },
         {
            "string": {
               "Desc": "Multiple parameters: String(s) or number(s) to be formatted <u>integer</u>."
            }
         }
      ],
      "Usage": "string.format(formatstring, string, ...)",
      "Examples": [
         "<pre>string.format(\"&percnt;s &percnt;q\", \"Hello\", \"Lua user!\")   -- string and quoted string\n--&gt;Hello \"Lua user!\"</pre>",
         "<pre>string.format(\"&percnt;c&percnt;c&percnt;c\", 76,117,97)             -- char\n--&gt;Lua</pre>",
         "<pre>string.format(\"&percnt;e, &percnt;E\", math.pi,math.pi)       -- exponent\n--&gt;3.141593e+000, 3.141593E+000</pre>",
         "<pre>string.format(\"&percnt;f, &percnt;g\", math.pi,math.pi)       -- float and compact float\n--&gt;3.141593, 3.14159</pre>",
         "<pre>string.format(\"&percnt;d, &percnt;i, &percnt;u\", -100,-100,-100)    -- signed, signed, unsigned integer\n--&gt;-100, -100, 4294967196</pre>",
         "<pre>string.format(\"&percnt;o, &percnt;x, &percnt;X\", -100,-100,-100)    -- octal, hex, hex\n--&gt;37777777634, ffffff9c, FFFFFF9C</pre>"
      ],
      "SeeAlso": [
         {
            "Title": "The string module - string operations",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#string"
         },
         {
            "Title": "Format a string",
            "Link": "http://help.interfaceware.com/code/details/format-a-string?v=6.0.0"
         },
         {
            "Title": " Dehydrating and rehydrating HL7 messages",
            "Link": "http://help.interfaceware.com/v6/dehydrating-and-rehydrating-hl7-messages?v=6.0.0"
         },
         {
            "Title": "Extending the string library",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#ext"
         },
         {
            "Title": "Online documentation for string.format",
            "Link": "http://www.lua.org/manual/5.1/manual.html#pdf-string.format"
         },
         {
            "Title": "Strings Tutorial",
            "Link": "http://lua-users.org/wiki/StringsTutorial"
         },
         {
            "Title": "String Library Tutorial",
            "Link": "http://lua-users.org/wiki/StringLibraryTutorial"
         },
         {
            "Title": "String Recipes",
            "Link": "http://lua-users.org/wiki/StringRecipes"
         },
         {
            "Title": "Patterns Tutorial",
            "Link": "http://lua-users.org/wiki/PatternsTutorial"
         },
         {
            "Title": "Understanding Lua OO syntax: what the colon operator means",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks#colon?v=6.0.0"
         }
      ],
      "Desc": "Returns a formatted version of its variable number of arguments following the description given in its first argument (which must be a string). The format string follows the same rules as the <code>printf</code> family of standard C&nbsp;functions. The only differences are that the options/modifiers <code>*</code>, <code>l</code>, <code>L</code>, <code>n</code>, <code>p</code>, and <code>h</code> are not supported and that there is an extra option, <code>q</code>. The <code>q</code> option formats a string in a form suitable to be safely read back by the Lua interpreter: the string is written between double quotes, and all double quotes, newlines, embedded zeros, and backslashes in the string are correctly escaped when written. For instance, the call<pre>\n      string.format('&percnt;q', 'a string with \"quotes\" and \\n new line')</pre>will produce the string:<pre>\n     \"a string with \\\"quotes\\\" and \\<br>      new line\"</pre>The options <code>c</code>, <code>d</code>, <code>E</code>, <code>e</code>, <code>f</code>, <code>g</code>, <code>G</code>, <code>i</code>, <code>o</code>, <code>u</code>, <code>X</code>, and <code>x</code> all expect a number as argument, whereas <code>q</code> and <code>s</code> expect a string. This function does not accept string values containing embedded zeros, except as arguments to the <code>q</code> option."
   },
   "gfind": {
      "Returns": [
         {
            "Desc": "An iterator function, used to loop through the pattern matches <u>iterator function</u>."
         }
      ],
      "Title": "string.gmatch",
      "SummaryLine": "Finds pattern matches and returns an iterator to loop through them.",
      "Parameters": [
         {
            "pattern": {
               "Desc": "Pattern to be matched <u>string</u>."
            }
         }
      ],
      "Usage": "string:gmatch(pattern)",
      "Examples": [
         "local iter = s:gmatch(\"hello\")<br><br>-- which is shorthand for: <br>local iter = string.gmatch(s,\"hello\")",
         "<pre>-- This loop iterates over all the words from string <code>s</code>, printing one per line:\ns = \"hello world from Lua\"\nfor w in s:gmatch(\"&percnt;a+\") do\n   print(w)\nend</pre>",
         "<pre>-- The next example collects all pairs <code>key=value</code> from the given string into a table:\nt = {}\n   s = \"from=world, to=Lua\"\nfor k, v in s:gmatch(\"(&percnt;w+)=(&percnt;w+)\") do\n   t[k] = v\nend</pre>"
      ],
      "SeeAlso": [
         {
            "Title": "The string module - string operations",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#string"
         },
         {
            "Title": "Extending the string library",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#ext"
         },
         {
            "Title": "Strings Tutorial",
            "Link": "http://lua-users.org/wiki/StringsTutorial"
         },
         {
            "Title": "String Library Tutorial",
            "Link": "http://lua-users.org/wiki/StringLibraryTutorial"
         },
         {
            "Title": "String Recipes",
            "Link": "http://lua-users.org/wiki/StringRecipes"
         },
         {
            "Title": "Patterns Tutorial",
            "Link": "http://lua-users.org/wiki/PatternsTutorial"
         },
         {
            "Title": "Online documentation Changes in the Libraries",
            "Link": "http://www.lua.org/manual/5.1/manual.html#7.2"
         },
         {
            "Title": "Online documentation for string.gmatch",
            "Link": "http://www.lua.org/manual/5.1/manual.html#pdf-string.gmatch"
         },
         {
            "Title": "Understanding Lua OO syntax: what the colon operator means",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks#colon?v=6.0.0"
         }
      ],
      "Desc": "Returns an iterator function that, each time it is called, returns the next captures from <code>pattern</code> over string <code>s</code>. If <code>pattern</code> specifies no captures, then the whole match is produced in each call.<br><br>For this function, a '<code>^</code>' at the start of a pattern does not work as an anchor, as this would prevent the iteration.<br><br><b>Note:</b> <code>string.gfind</code> is a alias for <code>string.gmatch</code> (<code>string.gfind</code> was renamed <code>string.gmatch</code> in Lua 5.1)."
   },
   "gmatch": {
      "Returns": [
         {
            "Desc": "An iterator function, used to loop through the pattern matches <u>iterator function</u>."
         }
      ],
      "Title": "string.gmatch",
      "SummaryLine": "Finds pattern matches and returns an iterator to loop through them.",
      "Parameters": [
         {
            "pattern": {
               "Desc": "Pattern to be matched <u>string</u>."
            }
         }
      ],
      "Usage": "string:gmatch(pattern)",
      "Examples": [
         "local iter = s:gmatch(\"hello\")<br><br>-- which is shorthand for: <br>local iter = string.gmatch(s,\"hello\")",
         "<pre>-- This loop iterates over all the words from string <code>s</code>, printing one per line:\ns = \"hello world from Lua\"\nfor w in s:gmatch(\"&percnt;a+\") do\n   print(w)\nend</pre>",
         "<pre>-- The next example collects all pairs <code>key=value</code> from the given string into a table:\nt = {}\n   s = \"from=world, to=Lua\"\nfor k, v in s:gmatch(\"(&percnt;w+)=(&percnt;w+)\") do\n   t[k] = v\nend</pre>"
      ],
      "SeeAlso": [
         {
            "Title": "The string module - string operations",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#string"
         },
         {
            "Title": "resubmit.lua (gfind)",
            "Link": "http://help.interfaceware.com/code/details/resubmit-lua?v=6.0.0"
         },
         {
            "Title": "Format data using repeating fields or segments (gfind)",
            "Link": "http://help.interfaceware.com/code/details/format-data-using-repeating-fields-or-segments?v=6.0.0"
         },
         {
            "Title": " What if … Date/Time is too fuzzy for date/time parser? (gmatch)",
            "Link": "http://help.interfaceware.com/v6/what-if-datetime-is-too-fuzzy-for-datetime-parser?v=6.0.0"
         },
         {
            "Title": "Using rxmatch() and rxsub() with PCRE regex (gmatch)",
            "Link": "http://help.interfaceware.com/code/details/format-data-using-repeating-fields-or-segments?v=6.0.0"
         },
         {
            "Title": "Extending the string library",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#ext"
         },
         {
            "Title": "Strings Tutorial",
            "Link": "http://lua-users.org/wiki/StringsTutorial"
         },
         {
            "Title": "String Library Tutorial",
            "Link": "http://lua-users.org/wiki/StringLibraryTutorial"
         },
         {
            "Title": "String Recipes",
            "Link": "http://lua-users.org/wiki/StringRecipes"
         },
         {
            "Title": "Patterns Tutorial",
            "Link": "http://lua-users.org/wiki/PatternsTutorial"
         },
         {
            "Title": "Online documentation Changes in the Libraries",
            "Link": "http://www.lua.org/manual/5.1/manual.html#7.2"
         },
         {
            "Title": "Online documentation for string.gmatch",
            "Link": "http://www.lua.org/manual/5.1/manual.html#pdf-string.gmatch"
         },
         {
            "Title": "Understanding Lua OO syntax: what the colon operator means",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks#colon?v=6.0.0"
         }
      ],
      "Desc": "Returns an iterator function that, each time it is called, returns the next captures from <code>pattern</code> over string <code>s</code>. If <code>pattern</code> specifies no captures, then the whole match is produced in each call.<br><br>For this function, a '<code>^</code>' at the start of a pattern does not work as an anchor, as this would prevent the iteration.<br><br><b>Note:</b> <code>string.gfind</code> is a alias for <code>string.gmatch</code> (<code>string.gfind</code> was renamed <code>string.gmatch</code> in Lua 5.1)."
   },
   "lower": {
      "Returns": [
         {
            "Desc": "A copy of the string with all uppercase letters changed to lowercase <u>string</u>."
         }
      ],
      "Title": "string.lower",
      "SummaryLine": "Converts a string to lowercase.",
      "Parameters": [],
      "Usage": "myString:lower()",
      "Examples": [
         "local low = s:lower()<br><br>-- which is shorthand for: <br>local low = string.lower(s)"
      ],
      "SeeAlso": [
         {
            "Title": "The string module - string operations",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#string"
         },
         {
            "Title": "Convert a string to upper or lower case",
            "Link": "http://help.interfaceware.com/code/details/convert-a-string-to-upper-or-lower-case?v=6.0.0"
         },
         {
            "Title": " Code: Filtering out messages you don’t want to forward",
            "Link": "http://help.interfaceware.com/v6/filtering-out-messages-you-dont-want-to-forward?v=6.0.0"
         },
         {
            "Title": "Extending the string library",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#ext"
         },
         {
            "Title": "Online documentation for string.lower",
            "Link": "http://www.lua.org/manual/5.1/manual.html#pdf-string.lower"
         },
         {
            "Title": "Strings Tutorial",
            "Link": "http://lua-users.org/wiki/StringsTutorial"
         },
         {
            "Title": "String Library Tutorial",
            "Link": "http://lua-users.org/wiki/StringLibraryTutorial"
         },
         {
            "Title": "String Recipes",
            "Link": "http://lua-users.org/wiki/StringRecipes"
         },
         {
            "Title": "Patterns Tutorial",
            "Link": "http://lua-users.org/wiki/PatternsTutorial"
         },
         {
            "Title": "Understanding Lua OO syntax: what the colon operator means",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks#colon?v=6.0.0"
         }
      ],
      "Desc": "Receives a string and returns a copy of this string with all uppercase letters changed to lowercase. All other characters are left unchanged. The definition of what an uppercase letter is depends on the current locale."
   },
   "split": {
      "Returns": [
         {
            "Desc": "A table with the string values separated by the split string <u>table</u>."
         }
      ],
      "Title": "string.split",
      "SummaryLine": "Splits a string using a delimiter string.",
      "Parameters": [
         {
            "separator": {
               "Desc": "Delimiter string <u>string</u>."
            }
         }
      ],
      "Usage": "string:split(separator)",
      "Examples": [
         "<pre>local s = \"one two three\"\nlocal items = s:split(\" \")\ntrace(items[1], items[2], items[3])\n-->trace('one','two','three')\n\n-- which is shorthand for:\nlocal items = string.split(s, \" \")</pre>"
      ],
      "SeeAlso": [
         {
            "Title": "The string module - string operations",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#string"
         },
         {
            "Title": "Split strings using a delimiter",
            "Link": "http://help.interfaceware.com/code/details/split-a-string-using-a-delimiter?v=6.0.0"
         },
         {
            "Title": "Handling broken MSH segments",
            "Link": "http://help.interfaceware.com/handling-broken-msh-segments.html?v=6.0.0"
         },
         {
            "Title": "Reformat Report",
            "Link": "http://help.interfaceware.com/v6/reformat-report?v=6.0.0"
         },
         {
            "Title": "Extending the string library",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#ext"
         },
         {
            "Title": "Strings Tutorial",
            "Link": "http://lua-users.org/wiki/StringsTutorial"
         },
         {
            "Title": "Understanding Lua OO syntax: what the colon operator means",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks#colon?v=6.0.0"
         }
      ],
      "Desc": "Returns a table of values in the string <code>s</code> separated by the <code>delimiter</code> string. If <code>delimiter</code> is not found in the string, the resulting table consists of only the single value <code>s</code>.<br><br>If <code>delimiter</code> appears multiple times in a row, the resulting table will contain empty strings as the values in between these segments."
   },
   "rxmatch": {
      "Returns": [
         {
            "Desc": "An iterator function, used to loop through the regular expression matches <u>iterator function</u>."
         }
      ],
      "Title": "string.rxmatch",
      "SummaryLine": "Finds regular expression matches and returns an iterator to loop through them.",
      "Parameters": [
         {
            "regex": {
               "Desc": "Regular expression to be matched <u>string</u>."
            }
         },
         {
            "mods": {
               "Desc": "Regular expression modifiers <u>string</u>.",
               "Opt": true
            }
         }
      ],
      "Usage": "string:rxmatch(regex [, mods])",
      "Examples": [
         "<pre>s = \"hello world from Lua\"\nlocal iter = s:rxmatch(\"\\\\S*\")\n\n-- which is shorthand for:\nlocal iter = string.rxmatch(s, \"\\\\S*\")</pre>",
         "<pre>-- This loop iterates over all the words from string <code>s</code>, printing one per line:\ns = \"hello world from Lua\"\nfor w in s:rxmatch(\"\\\\S*\") do\n   print(w)\nend</pre>",
         "<pre>-- The next example collects all pairs <code>key=value</code> from the given string into a table:\nt = {}\ns = \"from=world, to=Lua\"\nfor k, v in s:rxmatch(\"(\\\\w*)=(\\\\w*)\") do\n   t[k] = v\nend</pre>"
      ],
      "SeeAlso": [
         {
            "Title": "The string module - string operations",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#string"
         },
         {
            "Title": "Extract html tags with PCRE regex",
            "Link": "http://help.interfaceware.com/code/details/extract-html-tags?v=6.0.0"
         },
         {
            "Title": "Using rxmatch() and rxsub() with PCRE regex",
            "Link": "http://help.interfaceware.com/using-rxmatch-and-rxsub-with-pcre-regex.html?v=6.0.0"
         },
         {
            "Title": "Extending the string library",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#ext"
         },
         {
            "Title": "Strings Tutorial",
            "Link": "http://lua-users.org/wiki/StringsTutorial"
         },
         {
            "Title": "Understanding Lua OO syntax: what the colon operator means",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks#colon?v=6.0.0"
         },
         {
            "Title": "Additional examples for rxmatch",
            "Link": "http://help.interfaceware.com/using-rxmatch-and-rxsub-with-pcre-regex.html?v=6.0.0"
         }
      ],
      "Desc": "Returns an iterator function that, each time it is called, returns the next captures from <code>regex</code> over string <code>s</code>. If <code>regex</code> specifies no captures, then the whole match is produced in each call.<br><br>For this function, any Perl-Compatible Regular Expression may be used, including the start-of-string anchor <code>^</code> and the end-of-string anchor <code>$</code>. Common token shorthands like <code>\\s</code> for whitespace and <code>\\D</code> for non-digits are also supported.<br><br>An additional optional argument can be specified as a string of modifier characters to enable additional Regular Expression behaviour:<ul><li><b>m</b>: Multi-line anchoring mode</li><li><b>s</b>: Single-line/Dot-all mode</li><li><b>i</b>: Case-insensitive matching</li><li><b>x</b>: Extended mode</li><li><b>X</b>: Extra mode</li><li><b>u</b>: Unicode support mode</li><li><b>U</b>: Ungreedy/lazy matching (<code>?</code> now means greedy matching)</li><li><b>A</b>: Anchored mode</li><li><b>J</b>: Allow duplicate subpattern names</li></ul>For full details on how these modifiers work, visit the <a href=\"http://help.interfaceware.com/using-rxmatch-and-rxsub-with-pcre-regex.html?v=6.0.0\">additional rxmatch examples page</a>.<br><br><b>Note:</b> Backslashes must be escaped (<code>\\\\</code>) when specifying token shorthands or <code>$</code> in the interpreter (e.g. <code>\\\\w</code>)."
   },
   "rxsub": {
      "Returns": [
         {
            "Desc": "A copy of the <code>s</code> in which matches of <code>regex</code> are replaced <u>string</u>."
         }
      ],
      "Title": "string.rxsub",
      "SummaryLine": "String find and replace regular expression matches in a string.",
      "Parameters": [
         {
            "regex": {
               "Desc": "Regular expression to be matched <u>string</u>."
            }
         },
         {
            "sub": {
               "Desc": "Substitution <u>string</u> <strong>OR</strong> <u>function</u> <strong>OR</strong> <u>table</u>."
            }
         },
         {
            "n": {
               "Desc": "Maximum number of matches to substitute <u>integer</u>.",
               "Opt": true
            }
         },
         {
            "mods": {
               "Desc": "Regular expression modifiers <u>string</u>.",
               "Opt": true
            }
         }
      ],
      "Usage": "string:rxsub(regex, sub [, n ] [, mods])",
      "Examples": [
         "<pre>local s = \"hello world\"\nx = s:rxsub(\"(\\\\w+)\", \"$1 $1\")\n--> x=\"hello hello world world\"\n\n-- which is shorthand for:\nx = string.rxsub(s, \"(\\\\w+)\", \"$1 $1\")</pre>",
         "<pre>local s = \"hello world\"\nx = s:rxsub(\"(\\\\w+)\", \"$0 $0\", 1)\n--> x=\"hello hello world\"</pre>",
         "<pre>local s = \"hello world from Lua\"\nx = s:rxsub(\"(\\\\w+)\\\\s*(\\\\w+)\", \"\\\\2 \\\\1\")\n--> x=\"world hello Lua from\"</pre>",
         "<pre>local s = \"home = $HOME, user = $USER\"\nx = s:rxsub(\"\\\\$(\\\\w+)\", os.getenv)\n--> x=\"home = /home/roberto, user = roberto\"</pre>",
         "<pre>local s = \"4 + 5 = $return 4 + 5$\"\nx = s:rxsub(\"\\\\$(.*?)\\\\$\", function (s)\n   return loadstring(s)()\nend)\n--> x=\"4 + 5 = 9\"</pre>",
         "<pre>local t = {name=\"lua\", version=\"5.1\"}\nlocal x = string.rxsub(\"$name-$version.tar.gz\", \"\\\\$(\\\\w+)\", t)\n--> x=\"lua-5.1.tar.gz\"</pre>"
      ],
      "SeeAlso": [
         {
            "Title": "The string module - string operations",
            "Link": "http://help.interfaceware.com/api/?v=6.0.0#string"
         },
         {
            "Title": "Using negative indexes with string:sub()",
            "Link": "http://help.interfaceware.com/using-negative-indexes-with-stringsub.html?v=6.0.0"
         },
         {
            "Title": "Extending the string library",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#ext"
         },
         {
            "Title": "Online documentation for string.gsub",
            "Link": "http://www.lua.org/manual/5.1/manual.html#pdf-string.gsub"
         },
         {
            "Title": "Strings Tutorial",
            "Link": "http://lua-users.org/wiki/StringsTutorial"
         },
         {
            "Title": "Understanding Lua OO syntax: what the colon operator means",
            "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks#colon?v=6.0.0"
         },
         {
            "Title": "Additional examples for rxsub",
            "Link": "http://help.interfaceware.com/using-rxmatch-and-rxsub-with-pcre-regex.html?v=6.0.0"
         }
      ],
      "Desc": "This function behaves almost identically to string.gsub. It accepts the same substitution values along with the maximum match count, and it returns the same values. The only difference is that the first argument can be any Perl Compatible Regular Expression.<br><br>Similarly, if the substitution pattern is a string, back substitutions are supported in the form <code>$n</code> or <code>\\n</code> where <code>n</code> references the value of a specific match group. For regular expressions, back substitution indices may exceed 9. Any index with a valid corresponding match group is supported.<br><br>An additional optional argument can be specified as a string of modifier characters to enable additional Regular Expression behaviour:<ul><li><b>m</b>: Multi-line anchoring mode</li><li><b>s</b>: Single-line/Dot-all mode</li><li><b>i</b>: Case-insensitive matching</li><li><b>x</b>: Extended mode</li><li><b>X</b>: Extra mode</li><li><b>u</b>: Unicode support mode</li><li><b>U</b>: Ungreedy/lazy matching (<code>?</code> now means greedy matching)</li><li><b>A</b>: Anchored mode</li><li><b>J</b>: Allow duplicate subpattern names</li></ul>For full details on how these modifiers work, visit the <a href=\"http://help.interfaceware.com/using-rxmatch-and-rxsub-with-pcre-regex.html?v=6.0.0\">additional rxsub examples page</a>.<br><br><b>Note:</b> Backslashes must be escaped (<code>\\\\</code>) when specifying token shorthands or <code>$</code> in the interpreter (e.g. <code>\\\\w</code>)."
   },
   "capitalize" : {
      "Title":"string.capitalize",
      "Usage" :"string.capitalize(string) or aString:capitalize()",
      "SummaryLine":"Capitalizes the first letter of a string",
      "Desc":"Capitalize the first letter of a string.",
      "Returns" : [
         {
            "Desc": "String after it it has been capitalized <u>string</u>."
         }
      ],
      "ParameterTable" : false,
      "Parameters" : [
         {"string" :
            { "Desc" : "String to be capitalized <u>string</u>." }
         },
      ],
      "Examples" : [
            "   local S = 'string to be capitalized'
         S:capitalize()
         --> 'String to be capitalized'
            
         string.capitalize('string to be capitalized') 
         --> 'String to be capitalized'"
      ], 
      "SeeAlso":[
          {
             "Title": "The string module - string operations",
             "Link": "http://help.interfaceware.com/api/?v=6.0.0#string"
          },
         {
            "Title":"stringutil.lua - in our code repository.",
            "Link": "http://help.interfaceware.com/code/details/stringutil-lua"
         },
         {
            "Title":"String Manipulation Extensions ",
            "Link":"http://help.interfaceware.com/v6/stringutil-string-functions"
         },
         {
            "Title":"Tutorial: Transforming Messages – HL7 to HL7 ",
            "Link":"http://help.interfaceware.com/transforming-messages-hl7-to-hl7.html"
         },
         {
            "Title":"Transforming messages ",
            "Link":"http://help.interfaceware.com/code/details/transforming-messages"
         }
      ]
   },
   "trimWS" : {
      "Title":"string.trimWS",
      "Usage":"string.trimWS(string) or aString:trimWS()",
      "SummaryLine":"Trims white space from the start and the end of a string.",
      "Desc": "Trims white space from the start and the end of a string.",
      "Returns" : [
         { "Desc":"String after white spaces have been trimmed <u>string</u>."},
      ],
      "ParameterTable" : false,
      "Parameters" : [
         {"string": {"Desc" : "String to trim spaces from <u>string</u>."} },
      ],
      "Examples":[
         "   local S = '   trim spaces before and after   '
         S:trimWS()
         --> 'trim spaces before and after'
            
         string.trimWS('   trim spaces before and after   ') 
         --> 'trim spaces before and after'"
         
      ],
      "SeeAlso":[
          {
             "Title": "The string module - string operations",
             "Link": "http://help.interfaceware.com/api/?v=6.0.0#string"
          },
          {
             "Title":"String Manipulation Extensions in our Tools repository ",
             "Link":"http://help.interfaceware.com/v6/stringutil-string-functions"
          },
          {
             "Title":"stringutil.lua - in our code repository.",
             "Link":"http://help.interfaceware.com/code/details/stringutil-lua"
          },
          {
             "Title": "The node module - working with messages in Node Tree format",
             "Link": "http://help.interfaceware.com/api/?v=6.0.0#node"
          },
          {
             "Title": "String Manipulation Extensions",
             "Link": "http://help.interfaceware.com/v6/stringutil-string-functions?v=6.0.0"
          },
          {
             "Title": "Writing extensions to the node and string libraries",
             "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#ext"
          },
          {
             "Title": "Understanding Lua OO syntax: what the colon operator means",
             "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#colon"
          }
      ]
   },
   "trimRWS" : {
      "Title":"string.trimRWS",
      "Usage":"string.trimRWS(string) or aString:trimRWS()",
      "SummaryLine":"Trims white space from the right of a string.",
      "Desc":"Trims white space from the right of a string.",
      "Returns" : [
         {"Desc":"String after white spaces have been trimmed <u>string</u>."},
      ],
      "ParameterTable": false,
      "Parameters": [
         {"string": {"Desc":"String to trim spaces from <u>string</u>."}},
      ],
      "Examples":[
         "   local S = '   trim spaces from the right   '
         S:trimRWS()
         --> '   trim spaces from the right'
            
         string.trimRWS('   trim spaces from the right   ') 
         --> '   trim spaces from the right'
         "
      ],

      "SeeAlso":[
          {
             "Title": "The string module - string operations",
             "Link": "http://help.interfaceware.com/api/?v=6.0.0#string"
          },
          {
             "Title":"String Manipulation Extensions in our Tools repository ",
             "Link":"http://help.interfaceware.com/v6/stringutil-string-functions"
          },
          {
             "Title":"stringutil.lua - in our code repository.",
             "Link":"http://help.interfaceware.com/code/details/stringutil-lua"
          },
          {
             "Title": "Dealing with NULL data from databases",
             "Link": "http://help.interfaceware.com/v6/dealing-with-null-data-from-databases?v=6.0.0"
          },
          {
             "Title": "String Manipulation Extensions",
             "Link": "http://help.interfaceware.com/v6/stringutil-string-functions?v=6.0.0"
          },
          {
             "Title": "The node module - working with messages in Node Tree format",
             "Link": "http://help.interfaceware.com/api/?v=6.0.0#node"
          },
          {
             "Title": "Writing extensions to the node and string libraries",
             "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#ext"
          },
          {
             "Title": "Understanding Lua OO syntax: what the colon operator means",
             "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#colon"
          }
      ]
   },
   "trimLWS" : {
      "Title":"string.trimLWS",
      "Usage":"string.trimLWS(string) or aString:trimLWS()",
      "SummaryLine":"Trims white space from the left of a string.",
      "Desc":"Trims white space from the left of a string.",
      "Returns" : [
         {"Desc":"String after white spaces have been trimmed <u>string</u>."},
      ],
      "ParameterTable": false,
      "Parameters": [
         {"string": {"Desc":"String to trim spaces from <u>string</u>."}},
      ],
      "Examples":[
         "local S = '   trim spaces from the left   '
         S:trimLWS()
         --> 'trim spaces from the left   '
            
         string.trimLWS('   trim spaces from the left   ') 
         --> 'trim spaces from the left   '"
      ],

      "SeeAlso":[
          {
             "Title": "The string module - string operations",
             "Link": "http://help.interfaceware.com/api/?v=6.0.0#string"
          },
          {
             "Title":"String Manipulation Extensions in our Tools repository ",
             "Link":"http://help.interfaceware.com/v6/stringutil-string-functions"
          },
          {
             "Title":"stringutil.lua - in our code repository.",
             "Link":"http://help.interfaceware.com/code/details/stringutil-lua"
          },
          {
             "Title": "Dealing with NULL data from databases",
             "Link": "http://help.interfaceware.com/v6/dealing-with-null-data-from-databases?v=6.0.0"
          },
          {
             "Title": "String Manipulation Extensions",
             "Link": "http://help.interfaceware.com/v6/stringutil-string-functions?v=6.0.0"
          },
          {
             "Title": "The node module - working with messages in Node Tree format",
             "Link": "http://help.interfaceware.com/api/?v=6.0.0#node"
          },
          {
             "Title": "Writing extensions to the node and string libraries",
             "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#ext"
          },
          {
             "Title": "Understanding Lua OO syntax: what the colon operator means",
             "Link": "http://help.interfaceware.com/v6/eliots-tips-and-tricks?v=6.0.0#colon"
          }
      ]
   },
   "compactWS": {
      "Title":"string.compactWS",
      "Usage":"string.compactWS(string) or aString:compactWS()",
      "SummaryLine":"Replace multiple spaces with a single space.",
      "Desc":"Replace multiple spaces in a string with a single space.",
      "Returns" : [
         {"Desc":"String after white spaces have been trimmed <u>string</u>."},
      ],
      "ParameterTable": false,
      "Parameters": [
         {"string": {"Desc":"String to trim spaces from <u>string</u>."}},
      ],
      "Examples":[
         "   local S = '   replace    multiple   spaces   with  a  single  space   '
         S:compactWS()
         --> ' replace multiple spaces with a single space '
         
         string.compactWS('   replace    multiple   spaces   with  a  single  space   ') 
         --> ' replace multiple spaces with a single space '",
      ],
      "SeeAlso":[
         {
            "Title":"stringutil.lua - in our code repository.",
            "Link":"http://help.interfaceware.com/code/details/stringutil-lua"
         },
         {
            "Title":"String Manipulation Extensions ",
            "Link":"http://help.interfaceware.com/v6/stringutil-string-functions"
         }
      ]
   }
}
